#!/usr/bin/env node
/**
 * Beta Testing Report Generator
 * 
 * This script generates a summary report of beta testing activities
 * including bug reports, feedback, and test scenario completion.
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Configuration
const REPORT_DIR = path.join(__dirname, '../reports');
const TIMESTAMP = new Date().toISOString().replace(/:/g, '-').split('.')[0];
const REPORT_FILE = path.join(REPORT_DIR, `beta-report-${TIMESTAMP}.md`);

// Ensure reports directory exists
if (!fs.existsSync(REPORT_DIR)) {
  fs.mkdirSync(REPORT_DIR, { recursive: true });
}

// Mock data - in a real implementation, this would come from a database
const mockData = {
  bugReports: [
    { id: 'BUG-001', title: 'Definition popup not showing for some words', severity: 'medium', status: 'open', component: 'Reader' },
    { id: 'BUG-002', title: 'AI Assistant returns error on complex questions', severity: 'high', status: 'in-progress', component: 'AI' },
    { id: 'BUG-003', title: 'Help request form submission fails', severity: 'critical', status: 'fixed', component: 'Consultant' }
  ],
  feedback: [
    { id: 'FB-001', type: 'feature', rating: 4, content: 'The dictionary feature is very helpful for understanding complex words.' },
    { id: 'FB-002', type: 'usability', rating: 3, content: 'The AI assistant interface could be more intuitive.' },
    { id: 'FB-003', type: 'suggestion', rating: 5, content: 'Would be great to have a way to save favorite definitions.' }
  ],
  testScenarios: [
    { id: 'user-registration', title: 'User Registration Flow', completed: true, successRate: 100 },
    { id: 'reader-interface', title: 'Reader Interface', completed: true, successRate: 75 },
    { id: 'consultant-dashboard', title: 'Consultant Dashboard', completed: false, successRate: 50 }
  ],
  testers: [
    { id: 'T001', name: 'John Doe', role: 'Reader', completedScenarios: 3, bugsReported: 2, feedbackSubmitted: 1 },
    { id: 'T002', name: 'Jane Smith', role: 'Consultant', completedScenarios: 2, bugsReported: 1, feedbackSubmitted: 2 }
  ],
  performanceMetrics: {
    averagePageLoad: 320,
    averageRenderTime: 150,
    averageInteractionTime: 80
  }
};

// Generate the report
function generateReport() {
  const report = [
    `# Alice Reader Beta Testing Report`,
    `Generated: ${new Date().toLocaleString()}`,
    `\n## Summary`,
    `- Total Bug Reports: ${mockData.bugReports.length}`,
    `- Total Feedback Items: ${mockData.feedback.length}`,
    `- Test Scenarios Completed: ${mockData.testScenarios.filter(s => s.completed).length}/${mockData.testScenarios.length}`,
    `- Number of Testers: ${mockData.testers.length}`,
    
    `\n## Bug Reports`,
    `| ID | Title | Severity | Status | Component |`,
    `|---|---|---|---|---|`,
    ...mockData.bugReports.map(bug => 
      `| ${bug.id} | ${bug.title} | ${bug.severity} | ${bug.status} | ${bug.component} |`
    ),
    
    `\n## Feedback`,
    `| ID | Type | Rating | Content |`,
    `|---|---|---|---|`,
    ...mockData.feedback.map(fb => 
      `| ${fb.id} | ${fb.type} | ${fb.rating}/5 | ${fb.content} |`
    ),
    
    `\n## Test Scenarios`,
    `| ID | Title | Completed | Success Rate |`,
    `|---|---|---|---|`,
    ...mockData.testScenarios.map(scenario => 
      `| ${scenario.id} | ${scenario.title} | ${scenario.completed ? '✅' : '❌'} | ${scenario.successRate}% |`
    ),
    
    `\n## Testers`,
    `| ID | Name | Role | Completed Scenarios | Bugs Reported | Feedback Submitted |`,
    `|---|---|---|---|---|---|`,
    ...mockData.testers.map(tester => 
      `| ${tester.id} | ${tester.name} | ${tester.role} | ${tester.completedScenarios} | ${tester.bugsReported} | ${tester.feedbackSubmitted} |`
    ),
    
    `\n## Performance Metrics`,
    `- Average Page Load Time: ${mockData.performanceMetrics.averagePageLoad}ms`,
    `- Average Render Time: ${mockData.performanceMetrics.averageRenderTime}ms`,
    `- Average Interaction Time: ${mockData.performanceMetrics.averageInteractionTime}ms`,
    
    `\n## Next Steps`,
    `1. Address critical and high severity bugs`,
    `2. Implement suggested improvements based on feedback`,
    `3. Complete remaining test scenarios`,
    `4. Prepare for next beta testing phase`,
    
    `\n---`,
    `Report generated by Alice Reader Beta Testing Framework`
  ].join('\n');
  
  fs.writeFileSync(REPORT_FILE, report);
  console.log(`Report generated: ${REPORT_FILE}`);
  
  // Try to open the report
  try {
    const openCommand = process.platform === 'win32' ? 'start' : 
                        process.platform === 'darwin' ? 'open' : 'xdg-open';
    execSync(`${openCommand} "${REPORT_FILE}"`);
  } catch (error) {
    console.log('Could not automatically open the report.');
  }
}

// Run the report generator
generateReport();
