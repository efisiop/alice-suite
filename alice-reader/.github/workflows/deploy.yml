name: Deploy to GitHub Pages

on:
  # Runs on pushes targeting the main branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Set permissions for the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, cancel older runs
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm' # Keep npm caching for faster installs
          cache-dependency-path: '**/package-lock.json'

      # Clean node_modules just in case, though npm ci should handle consistency
      - name: Clean node_modules to ensure fresh install (Precautionary)
        run: |
          rm -rf node_modules
          rm -rf ~/.npm

      - name: Install dependencies reliably
        run: npm ci --no-cache # Use clean install without relying on potentially stale cache

      - name: Ensure notistack is installed
        run: npm install notistack@3.0.2 --save-exact

      - name: Verify notistack installation
        run: |
          echo "Checking if notistack is installed..."
          if [ -d "node_modules/notistack" ]; then
            echo "notistack is installed in node_modules"
            ls -la node_modules/notistack
          else
            echo "ERROR: notistack is not installed in node_modules"
            exit 1
          fi

      # Explicit Cache clearing steps (Belt-and-suspenders approach)
      - name: Clear npm cache (Explicit)
        run: npm cache clean --force

      - name: Clear Vite cache (Explicit)
        run: |
          rm -rf node_modules/.vite || echo "Vite cache dir not found or rm failed."
          rm -rf node_modules/.tmp || echo ".tmp dir not found or rm failed."

      # Diagnostic file listing (keep for one more run maybe)
      - name: List files in src directory (Debug)
        run: |
          echo "Files in src/components:"
          find src/components -type f | sort
          echo "Files in internal-dev/components:"
          find internal-dev/components -type f | sort

      - name: Verify Node Env and Vite Mode
        run: |
          echo "NODE_ENV: $NODE_ENV"
          echo "Vite Mode Variable: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && 'production' || 'development' }}"
          echo "Repository name: ${{ github.repository }}"

      - name: Create production environment file
        run: |
          echo "VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }}" >> .env.production
          echo "VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY }}" >> .env.production

      - name: Type checking
        # Use the specific script from package.json if it exists, otherwise use npx tsc
        run: |
          if npm run type-check --if-present; then
            echo "Type check via npm script succeeded."
          else
            echo "npm run type-check not found or failed, trying npx tsc --noEmit..."
            npx tsc --noEmit
          fi

      - name: Build project with Vite (Explicit Mode & emptyOutDir)
        # Run vite build directly using npx with explicit production mode
        run: |
          echo "Building with Vite..."
          export NODE_OPTIONS="--max-old-space-size=4096"
          npx vite build --mode production --emptyOutDir

      - name: Setup Pages artifact structure
        # This action prepares the environment for upload-pages-artifact
        uses: actions/configure-pages@v4
        # No 'with' needed here usually when using Vite preset below,
        # but explicitly stating it doesn't hurt if issues arise later
        # with:
        #   static_site_generator: "vite"

      - name: Create 404.html for SPA routing
        # Ensure this runs AFTER the build creates the dist folder
        run: cp dist/index.html dist/404.html

      - name: Upload artifact for deployment
        # Use the dedicated Pages artifact upload action
        uses: actions/upload-pages-artifact@v3 # v3 is current for upload
        with:
          # Upload entire directory
          path: './dist'
          retention-days: 1 # Optional: Adjust artifact retention

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build # Run after build is complete
    runs-on: ubuntu-latest
    # Explicitly set permissions required for the deploy job
    permissions:
      pages: write      # Required to deploy to GitHub Pages
      id-token: write   # Required for OIDC token authentication
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 # <-- Use v4 for deployment
        # No 'with: artifact_name' needed when using upload-pages-artifact
