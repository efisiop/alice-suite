import{r as l,m as f,h as S,i as U}from"./App-5fcca136.js";import{i as h}from"./initManager-a14d95b5.js";import{getSupabaseClient as u}from"./supabaseClient-e403129e.js";import{d as a}from"./index-a2a96a2b.js";import"./index-093ae4d1.js";var O=(t=>(t.LOGIN="LOGIN",t.PAGE_SYNC="PAGE_SYNC",t.SECTION_SYNC="SECTION_SYNC",t.DEFINITION_LOOKUP="DEFINITION_LOOKUP",t.AI_QUERY="AI_QUERY",t.HELP_REQUEST="HELP_REQUEST",t.FEEDBACK_SUBMISSION="FEEDBACK_SUBMISSION",t.QUIZ_ATTEMPT="QUIZ_ATTEMPT",t.NOTE_CREATION="NOTE_CREATION",t))(O||{});const _=async()=>(a("LoggingService","Creating logging service","info"),{logInteraction:async(o,e,r={})=>{try{a("LoggingService",`Logging interaction: ${e}`,"info",{userId:o,...r});const{bookId:i,sectionId:n,pageNumber:s,content:g,...c}=r,w=Object.keys(c).length>0?c:null,v=await u(),{error:y}=await v.from("interactions").insert({user_id:o,event_type:e,book_id:i||null,section_id:n||null,page_number:s||null,content:g||null,context:w?JSON.stringify(w):null});return y?(a("LoggingService",`Error logging interaction: ${y.message}`,"error",y),!1):!0}catch(i){return a("LoggingService","Error logging interaction","error",i),!1}},getUserInteractions:async(o,e={})=>{try{const{eventType:r,bookId:i,limit:n=100,offset:s=0}=e;a("LoggingService","Getting user interactions","info",{userId:o,eventType:r,bookId:i,limit:n,offset:s});let c=(await u()).from("interactions").select("*").eq("user_id",o).order("created_at",{ascending:!1}).range(s,s+n-1);r&&(c=c.eq("event_type",r)),i&&(c=c.eq("book_id",i));const{data:w,error:v}=await c;return v?(a("LoggingService",`Error getting user interactions: ${v.message}`,"error",v),[]):w||[]}catch(r){return a("LoggingService","Error getting user interactions","error",r),[]}},getInteractionStats:async(o,e={})=>{try{const{bookId:r,startDate:i,endDate:n}=e;a("LoggingService","Getting interaction stats","info",{userId:o,bookId:r,startDate:i,endDate:n});let g=(await u()).from("interactions").select("event_type").eq("user_id",o);r&&(g=g.eq("book_id",r)),i&&(g=g.gte("created_at",i.toISOString())),n&&(g=g.lte("created_at",n.toISOString()));const{data:c,error:w}=await g;if(w)return a("LoggingService",`Error getting interaction stats: ${w.message}`,"error",w),{total:0};const v={total:(c==null?void 0:c.length)||0,byType:{}};return c==null||c.forEach(y=>{const d=y.event_type;v.byType[d]=(v.byType[d]||0)+1}),v}catch(r){return a("LoggingService","Error getting interaction stats","error",r),{total:0}}}});h.register("loggingService",async()=>{const t=await _();l.register("loggingService",t)});const p=async(t,o,e)=>(await l.getOrInitialize("loggingService",h)).logInteraction(t,o,e),A=async()=>{a("AuthService","Creating auth service","info");const t=async()=>await U();return{signIn:async(e,r)=>{var i;try{if(a("AuthService","Signing in user","info"),await t()){const s=await(await u()).auth.signInWithPassword({email:e,password:r});if(s.error)throw s.error;return(i=s.data)!=null&&i.user&&await p(s.data.user.id,O.LOGIN,{content:"User logged in successfully"}).catch(g=>{a("AuthService","Error logging login interaction","error",g)}),s}else return f.auth.signIn(e,r)}catch(n){throw S(n,"authService","signIn")}},signUp:async(e,r,i,n)=>{try{if(a("AuthService","Signing up user","info"),await t()){const s=await u(),g=i&&n?{data:{first_name:i,last_name:n}}:void 0,c=await s.auth.signUp({email:e,password:r,options:g});if(c.error)throw c.error;return c}else return f.auth.signUp(e,r)}catch(s){throw S(s,"authService","signUp")}},signOut:async()=>{try{if(a("AuthService","Signing out user","info"),await t()){const r=await(await u()).auth.signOut();if(r.error)throw r.error;return r}else return f.auth.signOut()}catch(e){throw S(e,"authService","signOut")}},getSession:async()=>{try{if(a("AuthService","Getting session","info"),await t()){const r=await(await u()).auth.getSession();if(r.error)throw r.error;return r}else return f.auth.getSession()}catch(e){throw S(e,"authService","getSession")}},getUser:async()=>{try{if(a("AuthService","Getting user","info"),await t()){const e=await u(),{data:r,error:i}=await e.auth.getUser();if(i)throw i;return{data:r,error:null}}else return f.auth.getUser()}catch(e){throw S(e,"authService","getUser")}},getUserProfile:async e=>{try{if(a("AuthService",`Getting user profile for ${e}`,"info"),await t()){const r=await u(),{data:i,error:n}=await r.from("profiles").select("*").eq("id",e).single();if(n)throw a("AuthService",`Error fetching profile for user ${e}:`,"error",n.message),n;return a("AuthService",`Profile fetched successfully for user ${e}`,"success"),{data:i,error:null}}else return f.auth.getUserProfile(e)}catch(r){throw S(r,"authService","getUserProfile")}},createUserProfile:async(e,r)=>{try{if(a("AuthService",`Creating user profile for ${e}`,"info"),await t()){const i=await u(),{data:n,error:s}=await i.from("profiles").insert({id:e,...r,created_at:new Date().toISOString(),updated_at:new Date().toISOString()}).select().single();if(s)throw s;return{data:n,error:null}}else return f.auth.createUserProfile(e,r)}catch(i){throw S(i,"authService","createUserProfile")}},updateUserProfile:async(e,r)=>{try{if(a("AuthService",`Updating user profile for ${e}`,"info"),await t()){const i=await u(),{data:n,error:s}=await i.from("profiles").update({...r,updated_at:new Date().toISOString()}).eq("id",e).select().single();if(s)throw s;return{data:n,error:null}}else return f.auth.updateUserProfile(e,r)}catch(i){throw S(i,"authService","updateUserProfile")}},onAuthStateChange:e=>{try{return a("AuthService","Setting up auth state change listener","info"),t()?u().auth.onAuthStateChange(e):f.auth.onAuthStateChange(e)}catch(r){throw S(r,"authService","onAuthStateChange")}},resetPassword:async e=>{try{if(a("AuthService",`Sending password reset email to ${e}`,"info"),await t()){const r=await u(),{data:i,error:n}=await r.auth.resetPasswordForEmail(e);if(n)throw n;return{data:i,error:null}}else return f.auth.resetPassword(e)}catch(r){throw S(r,"authService","resetPassword")}},verifyBookCode:async e=>{try{if(a("AuthService",`Verifying book code: ${e}`,"info"),await t()){const r=await u(),{data:i,error:n}=await r.from("verification_codes").select("*").eq("code",e).eq("is_used",!1).single();if(n)throw n;return{data:i,error:null}}else return f.auth.verifyBookCode(e)}catch(r){throw S(r,"authService","verifyBookCode")}}}};h.register("authService",async()=>{const t=await A();l.register("authService",t)});const I=async(t,o)=>(await l.getOrInitialize("authService",h)).signIn(t,o),P=async(t,o,e,r)=>(await l.getOrInitialize("authService",h)).signUp(t,o,e,r),E=async()=>(await l.getOrInitialize("authService",h)).signOut(),C=async()=>(await l.getOrInitialize("authService",h)).getSession(),m=async()=>(await l.getOrInitialize("authService",h)).getUser(),L=async t=>(await l.getOrInitialize("authService",h)).getUserProfile(t),N=async(t,o)=>(await l.getOrInitialize("authService",h)).createUserProfile(t,o),k=async(t,o)=>(await l.getOrInitialize("authService",h)).updateUserProfile(t,o),b=t=>l.get("authService").onAuthStateChange(t),B=async t=>(await l.getOrInitialize("authService",h)).resetPassword(t),T=async t=>(await l.getOrInitialize("authService",h)).verifyBookCode(t),R={signIn:I,signUp:P,signOut:E,getSession:C,getUser:m,getUserProfile:L,createUserProfile:N,updateUserProfile:k,onAuthStateChange:b,resetPassword:B,verifyBookCode:T};export{A as createAuthService,N as createUserProfile,R as default,C as getSession,m as getUser,L as getUserProfile,b as onAuthStateChange,B as resetPassword,I as signIn,E as signOut,P as signUp,k as updateUserProfile,T as verifyBookCode};
