import{c as $}from"./index-093ae4d1.js";import{d as r}from"./index-a2a96a2b.js";const d=5,E=500,y=1e4,P=()=>({supabaseUrl:"https://blwypdcobizmpidmuhvq.supabase.co",supabaseAnonKey:"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJsd3lwZGNvYml6bXBpZG11aHZxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQyMDgzNDcsImV4cCI6MjA1OTc4NDM0N30.YP2r-CnSaM4rKclXBivanAMBQh9sMsI95F2p87zIuWM"});let S=null,k=0;const m=(e,t="Supabase")=>{e&&(typeof e=="string"?r("SupabaseClient",`${t}: ${e}`,"error"):e.message?r("SupabaseClient",`${t}: ${e.message}`,"error",{code:e.code,details:e.details}):r("SupabaseClient",`${t}: Unknown error format`,"error",e))},f=async()=>{try{if(!S){r("SupabaseClient","Initializing Supabase client (singleton)","debug");const{supabaseUrl:e,supabaseAnonKey:t}=P();S=$(e,t,{auth:{autoRefreshToken:!0,persistSession:!0}}),k=Date.now(),r("SupabaseClient","Supabase client initialized successfully","success")}return S}catch(e){throw m(e,"Client initialization"),e}},C=async(e,t)=>{var s,l,c,n,g;let o=0,i=E;const a=Date.now();for(;o<d;)try{const u=Date.now();r("SupabaseClient",`Executing ${t} (attempt ${o+1}/${d})`,"debug");const p=await e(),b=Date.now()-u;return b>2e3?r("SupabaseClient",`${t} completed in ${b}ms (slow operation)`,"warning"):r("SupabaseClient",`${t} completed in ${b}ms`,"debug"),p}catch(u){o++;const p=((s=u.message)==null?void 0:s.includes("network"))||((l=u.message)==null?void 0:l.includes("timeout"))||((c=u.message)==null?void 0:c.includes("connection")),b=u.code==="429"||((n=u.message)==null?void 0:n.includes("rate limit"))||((g=u.message)==null?void 0:g.includes("too many requests")),h=Date.now()-a;if(h>5e3)throw r("SupabaseClient",`${t} taking too long (${h}ms) - giving up after ${o} attempts`,"error"),u;const w=o>=d?"error":"warning";if(r("SupabaseClient",`${t} attempt ${o}/${d} failed: ${u.message}`,w),m(u,`${t} (attempt ${o}/${d})`),o>=d)throw r("SupabaseClient",`${t} failed after ${d} attempts`,"error"),u;b?i=Math.min(i*1.5,y):i=Math.min(E*(o+.5),2e3),r("SupabaseClient",`Retrying ${t} in ${Math.round(i)}ms (${p?"network issue":b?"rate limit":"error"})`,"debug"),await new Promise(_=>setTimeout(_,i))}throw new Error(`Failed ${t} after ${d} retries`)};async function D(e){return r("SupabaseClient",`Fetching profile for user: ${e}`,"info"),await C(async()=>{const t=await f(),{data:o,error:i}=await t.from("profiles").select("*").eq("id",e).single();if(i)throw r("SupabaseClient",`Error fetching profile for user ${e}:`,"error",i.message),i;return r("SupabaseClient",`Profile fetched successfully for user ${e}`,"success"),o},"getUserProfile")}async function R(e,t,o,i){r("SupabaseClient",`Creating profile for user: ${e}`,"info"),console.log("SupabaseClient: Creating profile for user:",e,{firstName:t,lastName:o,email:i});try{const a=await f(),{data:s,error:l}=await a.from("profiles").select("*").eq("id",e).single();if(console.log("SupabaseClient: Profile check result:",{existingProfile:s,checkError:l}),s){r("SupabaseClient",`Profile already exists for user ${e}, updating it`,"info"),console.log("SupabaseClient: Profile already exists, updating it");const{data:c,error:n}=await a.from("profiles").update({first_name:t,last_name:o,email:i,updated_at:new Date().toISOString()}).eq("id",e).select().single();if(console.log("SupabaseClient: Profile update result:",{updatedProfile:c,updateError:n}),n)throw r("SupabaseClient",`Error updating profile for user ${e}:`,"error",n.message),console.error("SupabaseClient: Error updating profile:",n),n;return r("SupabaseClient",`Profile updated successfully for user ${e}`,"success"),console.log("SupabaseClient: Profile updated successfully"),c}else return r("SupabaseClient",`Creating new profile for user ${e}`,"info"),console.log("SupabaseClient: Creating new profile"),await C(async()=>{const{data:c,error:n}=await a.from("profiles").insert({id:e,first_name:t,last_name:o,email:i,created_at:new Date().toISOString(),updated_at:new Date().toISOString()}).select().single();if(console.log("SupabaseClient: Profile creation result:",{data:c,error:n}),n)throw r("SupabaseClient",`Error creating profile for user ${e}:`,"error",n.message),console.error("SupabaseClient: Error creating profile:",n),n;return r("SupabaseClient",`Profile created successfully for user ${e}`,"success"),console.log("SupabaseClient: Profile created successfully"),c},"createUserProfile")}catch(a){throw r("SupabaseClient",`Error in createUserProfile for user ${e}:`,"error",a),console.error("SupabaseClient: Error in createUserProfile:",a),a}}async function M(e,t){return r("SupabaseClient",`Updating profile for user: ${e}`,"info"),console.log(`SupabaseClient: Updating profile for user: ${e}`,t),await C(async()=>{const o=await f();try{const{data:i,error:a}=await o.from("profiles").update(t).eq("id",e).select().single();if(a)throw r("SupabaseClient",`Error updating profile for user ${e}: ${a.message}`,"error"),console.error("SupabaseClient: Error updating profile:",a),a;return r("SupabaseClient",`Profile updated successfully for user ${e}`,"success"),console.log("SupabaseClient: Profile updated successfully:",i),i}catch(i){throw r("SupabaseClient",`Error updating profile for user ${e}:`,"error",i),console.error("SupabaseClient: Error updating profile:",i),i}},"updateUserProfile")}async function T(e,t){try{console.log("SupabaseClient: Using fast profile update for user:",e,t);const o=await f(),{data:i,error:a}=await o.rpc("fast_profile_update",{user_id:e,first_name:t.first_name||null,last_name:t.last_name||null,email:t.email||null,book_verified:t.book_verified===void 0?null:t.book_verified});if(a)throw console.error("SupabaseClient: Fast profile update failed:",a),a;return{data:i,error:null}}catch(o){return console.error("SupabaseClient: Error in fast profile update:",o),{data:null,error:o}}}async function q(e,t,o,i){try{r("SupabaseClient",`Verifying book code: ${e} for user: ${t}`,"info"),console.log(`DEBUG: Verifying book code: ${e} for user: ${t}`),console.log(`DEBUG: First name: ${o}, Last name: ${i}`);const a=await f(),{data:s,error:l}=await a.from("verification_codes").select("*, books(id, title, author)").eq("code",e.toUpperCase()).single();if(console.log("DEBUG: Verification code check result:",{data:s,error:l}),l||!s)return r("SupabaseClient","Invalid verification code","error",l),console.log("DEBUG: Invalid verification code:",l),{success:!1,error:"Invalid verification code"};if(s.is_used)return r("SupabaseClient","Code already used","warning"),console.log("DEBUG: Code already used"),{success:!1,error:"This code has already been used"};const c=a.from("verification_codes").update({is_used:!0,used_by:t}).eq("code",e.toUpperCase()),n={book_verified:!0,...o?{first_name:o}:{},...i?{last_name:i}:{}};console.log("DEBUG: Profile updates to apply:",n);const g=T(t,n),[u,p]=await Promise.all([c,g]);return u.error?(r("SupabaseClient","Error updating verification code","error",u.error),console.log("DEBUG: Error updating verification code:",u.error),{success:!1,error:"Error updating verification code"}):p.error?(r("SupabaseClient","Error updating profile","error",p.error),console.log("DEBUG: Error updating profile:",p.error),{success:!1,error:`Profile update failed: ${String(p.error)}`,verificationStatus:"code_marked_used_profile_update_failed"}):(console.log("DEBUG: Profile updated successfully:",p.data),r("SupabaseClient","Book code verified successfully","success"),{success:!0,data:s})}catch(a){return r("SupabaseClient","Error verifying book code","error",a),console.log("DEBUG: Error verifying book code:",a),{success:!1,error:"Error verifying book code"}}}async function O(e){try{r("SupabaseClient",`Getting book with chapters: ${e}`,"info");const t=await f(),{data:o,error:i}=await t.from("books").select("*").eq("id",e).single();if(i)return r("SupabaseClient","Error fetching book","error",i),null;const{data:a,error:s}=await t.from("chapters").select("*").eq("book_id",e).order("number");if(s)return r("SupabaseClient","Error fetching chapters","error",s),null;const l=await Promise.all(a.map(async c=>{const{data:n,error:g}=await t.from("sections").select("*").eq("chapter_id",c.id).order("number");return g?(r("SupabaseClient",`Error fetching sections for chapter ${c.id}`,"error",g),{...c,sections:[]}):{...c,sections:n||[]}}));return{...o,chapters:l}}catch(t){return r("SupabaseClient","Error in getBookWithChapters","error",t),null}}async function Y(e,t){try{r("SupabaseClient",`Getting sections for page: ${t} in book: ${e}`,"info");const o=await f(),{data:i,error:a}=await o.rpc("get_sections_for_page",{book_id_param:e,page_number_param:t});return a?(r("SupabaseClient","Error fetching sections for page","error",a),null):i}catch(o){return r("SupabaseClient","Error in getSectionsForPage","error",o),null}}async function L(e,t){try{r("SupabaseClient",`Getting definition for term: ${t} in book: ${e}`,"info");const o=await f(),{data:i,error:a}=await o.from("dictionary").select("definition").eq("book_id",e).ilike("term",t).single();return a?(r("SupabaseClient","Error fetching definition","error",a),null):i.definition}catch(o){return r("SupabaseClient","Error in getDefinition","error",o),null}}async function G(e,t,o,i){try{r("SupabaseClient",`Saving reading progress for user: ${e}, book: ${t}, section: ${o}`,"info");const a=await f(),{data:s,error:l}=await a.from("reading_progress").select("id").eq("user_id",e).eq("book_id",t).single();if(l&&l.code!=="PGRST116")return r("SupabaseClient","Error checking existing progress","error",l),!1;const c=new Date().toISOString();if(s){const{error:n}=await a.from("reading_progress").update({section_id:o,last_position:i||null,updated_at:c}).eq("id",s.id);if(n)return r("SupabaseClient","Error updating reading progress","error",n),!1;r("SupabaseClient","Reading progress updated successfully","success")}else{const{error:n}=await a.from("reading_progress").insert({user_id:e,book_id:t,section_id:o,last_position:i||null,updated_at:c});if(n)return r("SupabaseClient","Error inserting reading progress","error",n),!1;r("SupabaseClient","Reading progress created successfully","success")}return!0}catch(a){return r("SupabaseClient","Error in saveReadingProgress","error",a),!1}}async function B(e,t){try{r("SupabaseClient",`Getting reading progress for user: ${e}, book: ${t}`,"info");const o=await f(),{data:i,error:a}=await o.from("reading_progress").select(`
        id,
        user_id,
        book_id,
        section_id,
        last_position,
        last_read_at,
        updated_at,
        sections (
          id,
          title,
          content,
          page_number,
          chapter_id,
          chapters (
            id,
            title,
            number
          )
        )
      `).eq("user_id",e).eq("book_id",t).order("updated_at",{ascending:!1}).limit(1).single();return a?a.code==="PGRST116"?(r("SupabaseClient","No reading progress found","info"),null):(r("SupabaseClient","Error fetching reading progress","error",a),null):i}catch(o){return r("SupabaseClient","Error in getReadingProgress","error",o),null}}async function x(e,t){try{r("SupabaseClient",`TEST ONLY: Attempting direct profile update for user: ${e}`,"info",t);const o=await f(),{data:i,error:a}=await o.from("profiles").select("*").eq("id",e).single();if(a)return r("SupabaseClient",`TEST ONLY: Error getting profile for ${e}:`,"error",a),{success:!1,error:a,data:{method:"get_profile"}};r("SupabaseClient",`TEST ONLY: Profile exists for ${e}:`,"info",i);try{const{data:s,error:l}=await o.from("profiles").update(t).eq("id",e).select();if(l)r("SupabaseClient",`TEST ONLY: Error with Method 1 update for ${e}:`,"error",l);else return r("SupabaseClient",`TEST ONLY: Method 1 update successful for ${e}:`,"success",s),{success:!0,data:{method:"direct_update",result:s}}}catch(s){r("SupabaseClient",`TEST ONLY: Exception with Method 1 update for ${e}:`,"error",s)}try{const{data:s,error:l}=await o.rpc("update_profile",{user_id:e,profile_updates:t});if(l)r("SupabaseClient",`TEST ONLY: Error with Method 2 (RPC) update for ${e}:`,"error",l);else return r("SupabaseClient",`TEST ONLY: Method 2 (RPC) update successful for ${e}:`,"success",s),{success:!0,data:{method:"rpc_update",result:s}}}catch(s){r("SupabaseClient",`TEST ONLY: Exception with Method 2 (RPC) update for ${e}:`,"error",s)}try{const s=o,{data:l,error:c}=await s.from("profiles").update(t).eq("id",e).select();if(c)r("SupabaseClient",`TEST ONLY: Error with Method 3 (service role) update for ${e}:`,"error",c);else return r("SupabaseClient",`TEST ONLY: Method 3 (service role) update successful for ${e}:`,"success",l),{success:!0,data:{method:"service_role_update",result:l}}}catch(s){r("SupabaseClient",`TEST ONLY: Exception with Method 3 (service role) update for ${e}:`,"error",s)}return{success:!1,error:"All update methods failed"}}catch(o){return r("SupabaseClient","TEST ONLY: Error in testProfileUpdate:","error",o),{success:!1,error:o}}}const A=async(e=!1)=>{try{r("SupabaseClient","Checking Supabase connection","info");const t=await f(),{data:o,error:i}=await t.from("books").select("id").limit(1);return i?(r("SupabaseClient",`Supabase connection check failed: ${i.message}`,"error"),!1):(r("SupabaseClient","Supabase connection check successful","success"),!0)}catch(t){return r("SupabaseClient",`Supabase connection check error: ${t instanceof Error?t.message:String(t)}`,"error"),!1}};export{A as checkSupabaseConnection,R as createUserProfile,f as default,C as executeWithRetries,T as fastProfileUpdate,O as getBookWithChapters,L as getDefinition,B as getReadingProgress,Y as getSectionsForPage,f as getSupabaseClient,D as getUserProfile,m as handleSupabaseError,G as saveReadingProgress,x as testProfileUpdate,M as updateUserProfile,q as verifyBookCode};
