import{d as a}from"./index-a2a96a2b.js";import{r as _,B as f,h as o,A as C,E as F}from"./App-5fcca136.js";import{getSupabaseClient as w}from"./supabaseClient-e403129e.js";import"./index-093ae4d1.js";var b=(l=>(l.PENDING="PENDING",l.IN_PROGRESS="IN_PROGRESS",l.RESOLVED="RESOLVED",l))(b||{});let u;const s="ConsultantService",Y=async()=>(a(s,"Creating consultant service","info"),u=await w(),{checkIsConsultant:async()=>{try{a(s,"Checking if current user is a consultant","info");const e=await w(),{data:t,error:r}=await e.rpc("is_consultant");return r?(a(s,"Error checking consultant status","error",r),!1):t===!0}catch(e){throw o(e,"consultantService","checkIsConsultant")}},getVerifiedReaders:async()=>{try{const{data:e,error:t}=await u.from("profiles").select("*").eq("is_verified",!0);if(t)throw t;return a(s,`Found ${e.length} verified readers`,"success"),e.map(r=>({id:r.id,first_name:r.first_name,last_name:r.last_name,email:r.email,created_at:r.created_at,book_verified:!!r.book_verified,is_verified:!!r.is_verified,is_consultant:!!r.is_consultant,updated_at:r.updated_at||r.created_at}))}catch(e){return o(e,"Failed to fetch verified readers",s),[]}},getUserReadingDetails:async(e,t=f.ALICE)=>{try{a(s,"Getting user reading details","info",{userId:e,bookId:t});const{data:r,error:i}=await u.from("profiles").select("*").eq("id",e).single();if(i)throw o(i,"Failed to fetch user profile",s);const{data:n,error:c}=await u.from("reading_progress").select("*").eq("user_id",e).eq("book_id",t).single();if(c&&c.code!=="PGRST116")throw o(c,"Failed to fetch reading progress",s);const{data:d,error:h}=await u.from("reading_stats").select("*").eq("user_id",e).eq("book_id",t).single();if(h&&h.code!=="PGRST116")throw o(h,"Failed to fetch reading stats",s);const{data:p,error:q}=await u.from("interactions").select("*").eq("user_id",e).eq("book_id",t).order("created_at",{ascending:!1});if(q)throw o(q,"Failed to fetch user interactions",s);const{data:m,error:S}=await u.from("feedback").select("*").eq("user_id",e).eq("book_id",t).order("created_at",{ascending:!1});if(S)throw o(S,"Failed to fetch user feedback",s);const{data:k,error:y}=await u.from("help_requests").select("*").eq("user_id",e).eq("book_id",t).order("created_at",{ascending:!1});if(y)throw o(y,"Failed to fetch help requests",s);const{data:E,error:R}=await u.from("consultant_actions").select("*").eq("user_id",e).eq("book_id",t).order("created_at",{ascending:!1});if(R)throw o(R,"Failed to fetch consultant actions",s);try{await(await w()).rpc("log_consultant_action",{p_user_id:e,p_action_type:"VIEW_PROFILE",p_details:{book_id:t}})}catch(A){a(s,"Error logging profile view","warning",A)}return{profile:{id:r.id,first_name:r.first_name,last_name:r.last_name,email:r.email,created_at:r.created_at,book_verified:!!r.book_verified,is_verified:!!r.is_verified,is_consultant:!!r.is_consultant,updated_at:r.updated_at||r.created_at},progress:n||{},stats:d||{},activity:{interactions:p||[],feedback:m||[],helpRequests:k||[],consultantActions:E||[]}}}catch(r){throw o(r,"Failed to fetch user reading details",s)}},getPendingHelpRequests:async(e=f.ALICE)=>{try{a(s,"Getting pending help requests","info",{bookId:e});const{data:t,error:r}=await u.from("help_requests").select(`
        *,
        profiles (
          first_name,
          last_name,
          email
        )
      `).eq("book_id",e).eq("status","pending").order("created_at",{ascending:!0});if(r)throw o(r,"Failed to fetch pending help requests",s);return t||[]}catch(t){throw o(t,"Failed to fetch pending help requests",s)}},getAssignedHelpRequests:async(e,t=f.ALICE)=>{try{a(s,"Getting assigned help requests","info",{consultantId:e,bookId:t});const{data:r,error:i}=await u.from("help_requests").select(`
        *,
        profiles (
          first_name,
          last_name,
          email
        )
      `).eq("book_id",t).eq("consultant_id",e).neq("status","closed").order("created_at",{ascending:!0});if(i)throw o(i,"Failed to fetch assigned help requests",s);return r||[]}catch(r){throw o(r,"Failed to fetch assigned help requests",s)}},updateHelpRequestStatus:async(e,t,r)=>{try{a(s,"Updating help request status","info",{requestId:e,status:t,consultantId:r});const i={status:t,updated_at:new Date().toISOString()};r&&(i.consultant_id=r);const{data:n,error:c}=await u.from("help_requests").update(i).eq("id",e).select().single();if(c)throw o(c,"Failed to update help request status",s);return n}catch(i){throw o(i,"Failed to update help request status",s)}},getAllFeedback:async(e=f.ALICE)=>{try{a(s,"Getting all feedback","info",{bookId:e});const{data:t,error:r}=await u.from("user_feedback").select(`
        *,
        user:user_id (id, first_name, last_name, email),
        section:section_id (
          id, title,
          chapter:chapter_id (id, title)
        )
      `).eq("book_id",e).order("created_at",{ascending:!1});return r?(a(s,"Error fetching all feedback","error",r),[]):(a(s,`Found ${t.length} feedback items`,"success"),t)}catch(t){throw o(t,"consultantService","getAllFeedback")}},getPublicFeedback:async(e=f.ALICE)=>{try{a(s,"Getting public feedback","info",{bookId:e});const{data:t,error:r}=await u.from("user_feedback").select(`
        *,
        user:user_id (id, first_name, last_name),
        section:section_id (
          id, title,
          chapter:chapter_id (id, title)
        )
      `).eq("book_id",e).eq("is_public",!0).order("created_at",{ascending:!1});return r?(a(s,"Error fetching public feedback","error",r),[]):(a(s,`Found ${t.length} public feedback items`,"success"),t)}catch(t){throw o(t,"consultantService","getPublicFeedback")}},createConsultantTrigger:async(e,t=f.ALICE,r,i)=>{try{a(s,"Creating consultant trigger","info",{userId:e,bookId:t,triggerType:r,message:i});const n=await w(),{data:c,error:d}=await n.rpc("create_consultant_trigger",{p_user_id:e,p_book_id:t,p_trigger_type:r,p_message:i});return d?(a(s,"Error creating consultant trigger","error",d),null):(a(s,"Consultant trigger created successfully","success"),c)}catch(n){throw o(n,"consultantService","createConsultantTrigger")}},getUserTriggers:async e=>{try{a(s,"Getting user triggers","info",{userId:e});const{data:t,error:r}=await u.from("consultant_triggers").select(`
        *,
        consultant:consultant_id (id, first_name, last_name)
      `).eq("user_id",e).eq("is_processed",!1).order("created_at",{ascending:!1});return r?(a(s,"Error fetching user triggers","error",r),[]):(a(s,`Found ${t.length} unprocessed triggers`,"success"),t)}catch(t){throw o(t,"consultantService","getUserTriggers")}},markTriggerProcessed:async e=>{try{a(s,"Marking trigger as processed","info",{triggerId:e});const{error:t}=await u.from("consultant_triggers").update({is_processed:!0,processed_at:new Date().toISOString()}).eq("id",e);return t?(a(s,"Error marking trigger as processed","error",t),!1):(a(s,"Trigger marked as processed successfully","success"),!0)}catch(t){throw o(t,"consultantService","markTriggerProcessed")}},logConsultantAction:async(e,t,r)=>{try{a(s,"Logging consultant action","info",{userId:e,actionType:t,details:r});const i=await w(),{data:n,error:c}=await i.rpc("log_consultant_action",{p_user_id:e,p_consultant_id:user==null?void 0:user.id,p_action_type:t,p_details:r?JSON.stringify(r):null});return c?(a(s,"Error logging consultant action","error",c),null):(a(s,"Consultant action logged successfully","success"),n)}catch(i){throw o(i,"consultantService","logConsultantAction")}},submitFeedback:async(e,t=f.ALICE,r,i,n,c=!1)=>{try{a(s,"Submitting user feedback","info",{userId:e,bookId:t,feedbackType:r,sectionId:n,isPublic:c});const{data:d,error:h}=await u.from("user_feedback").insert({user_id:e,book_id:t,section_id:n||null,feedback_type:r,content:i,is_public:c}).select().single();return h?(a(s,"Error submitting feedback","error",h),null):(a(s,"Feedback submitted successfully","success"),d)}catch(d){throw o(d,"consultantService","submitFeedback")}},submitHelpRequest:async(e,t=f.ALICE,r,i,n)=>{try{a(s,"Submitting help request","info",{userId:e,bookId:t,sectionId:i,context:n});const{data:c,error:d}=await u.from("help_requests").insert({user_id:e,book_id:t,section_id:i||null,status:b.PENDING,content:r,context:n||null}).select().single();return d?(a(s,"Error submitting help request","error",d),null):(a(s,"Help request submitted successfully","success"),c)}catch(c){throw o(c,"consultantService","submitHelpRequest")}},getUserHelpRequests:async(e,t=f.ALICE)=>{try{a(s,"Getting user help requests","info",{userId:e,bookId:t});const{data:r,error:i}=await u.from("help_requests").select(`
        *,
        consultant:assigned_to (id, first_name, last_name),
        section:section_id (
          id, title,
          chapter:chapter_id (id, title)
        )
      `).eq("user_id",e).eq("book_id",t).order("created_at",{ascending:!1});return i?(a(s,"Error fetching user help requests","error",i),[]):(a(s,`Found ${r.length} help requests`,"success"),r)}catch(r){throw o(r,"consultantService","getUserHelpRequests")}},getUserFeedback:async(e,t=f.ALICE)=>{try{a(s,"Getting user feedback","info",{userId:e,bookId:t});const{data:r,error:i}=await u.from("user_feedback").select(`
        *,
        section:section_id (
          id, title,
          chapter:chapter_id (id, title)
        )
      `).eq("user_id",e).eq("book_id",t).order("created_at",{ascending:!1});return i?(a(s,"Error fetching user feedback","error",i),[]):(a(s,`Found ${r.length} feedback items`,"success"),r)}catch(r){throw o(r,"consultantService","getUserFeedback")}},getConsultantAssignments:async()=>{var e;try{const t=await w(),{data:r}=await t.auth.getSession();if(!((e=r.session)!=null&&e.user))return a(s,"No authenticated user found for assignments","warning"),[];const i=r.session.user.id,{data:n,error:c}=await u.from("consultant_assignments").select("*, user:user_id(id, first_name, last_name, email, last_active_at, book_verified, is_verified)").eq("consultant_id",i).eq("active",!0);return c?(a(s,"Error fetching consultant assignments","error",c),[]):(a(s,`Found ${n.length} consultant assignments`,"success"),n||[])}catch(t){throw o(t,"consultantService","getConsultantAssignments")}},getConsultantStats:async()=>{var e;try{a(s,"Getting consultant dashboard statistics","info");const t=await w(),{data:r}=await t.auth.getSession();if(!((e=r.session)!=null&&e.user))return a(s,"No authenticated user found","warning"),null;const i=r.session.user.id,{data:n,error:c}=await u.from("consultant_assignments").select("*, user:user_id(id, first_name, last_name)").eq("consultant_id",i).eq("active",!0);if(c)return a(s,"Error fetching assignments","error",c),null;const{data:d,error:h}=await u.from("help_requests").select("*").or(`assigned_to.eq.${i},status.eq.${b.PENDING}`);if(h)return a(s,"Error fetching help requests","error",h),null;const{data:p,error:q}=await u.from("user_feedback").select("*").in("user_id",(n==null?void 0:n.map(g=>g.user_id))||[]);if(q)return a(s,"Error fetching feedback","error",q),null;const{data:m,error:S}=await u.from("consultant_actions_log").select("*, user:user_id(id, first_name, last_name)").eq("consultant_id",i).order("created_at",{ascending:!1}).limit(10);if(S)return a(s,"Error fetching recent actions","error",S),null;const k=new Date,y=new Date(k.getTime()-7*24*60*60*1e3),E={high:0,medium:0,low:0};n==null||n.forEach(g=>{if(!g.last_active_at){E.low++;return}const v=new Date(g.last_active_at);v>y?E.high++:v>new Date(k.getTime()-14*24*60*60*1e3)?E.medium++:E.low++});const R=(m==null?void 0:m.map(g=>{let v="Unknown action";switch(g.action_type){case"TRIGGER_PROMPT":v="Sent a prompt to reader";break;case"UPDATE_HELP_REQUEST":v="Updated help request status";break;case"VIEW_READER_PROFILE":v="Viewed reader profile";break;default:v=`${g.action_type}`}return{id:g.id,type:g.action_type.toLowerCase(),userId:g.user_id,userName:g.user?`${g.user.first_name} ${g.user.last_name}`:"Unknown User",timestamp:g.created_at,description:v}}))||[],A={totalReaders:(n==null?void 0:n.length)||0,activeReaders:(n==null?void 0:n.filter(g=>g.last_active_at&&new Date(g.last_active_at)>y).length)||0,pendingRequests:(d==null?void 0:d.filter(g=>g.status===b.PENDING).length)||0,resolvedRequests:(d==null?void 0:d.filter(g=>g.status===b.RESOLVED).length)||0,totalFeedback:(p==null?void 0:p.length)||0,recentFeedback:(p==null?void 0:p.filter(g=>new Date(g.created_at)>y).length)||0,readerEngagement:E,recentActivity:R};return a(s,"Consultant stats retrieved successfully","success"),A}catch(t){throw o(t,"consultantService","getConsultantStats")}},getHelpRequests:async e=>{try{a(s,"Getting help requests","info",{statusFilter:e});let t=u.from("help_requests").select(`
        *,
        user:user_id (
          id,
          first_name,
          last_name,
          email
        ),
        consultant:assigned_to (
          id,
          first_name,
          last_name
        ),
        section:section_id (
          id,
          title,
          chapter:chapter_id (
            id,
            title
          )
        )
      `).order("created_at",{ascending:!1});e&&(t=t.eq("status",e));const{data:r,error:i}=await t;return i?(a(s,"Error fetching help requests","error",i),[]):(a(s,`Found ${r.length} help requests`,"success"),r)}catch(t){throw o(t,"consultantService","getHelpRequests")}},getReaderInteractions:async(e,t)=>{try{a(s,"Getting reader interactions","info",{userId:e,eventType:t});let r=u.from("interactions").select(`
        id,
        user_id,
        event_type,
        book_id,
        section_id,
        page_number,
        content,
        context,
        created_at,
        profiles (first_name, last_name, email)
      `).order("created_at",{ascending:!1});e&&(r=r.eq("user_id",e)),t&&(r=r.eq("event_type",t));const{data:i,error:n}=await r;return n?(a(s,"Error fetching reader interactions","error",n),[]):(a(s,`Found ${i.length} reader interactions`,"success"),i.map(c=>({...c,user_name:c.profiles?`${c.profiles.first_name} ${c.profiles.last_name}`:"Unknown User",user_email:c.profiles?c.profiles.email:"Unknown Email"})))}catch(r){throw o(r,"consultantService","getReaderInteractions")}},getDashboardData:async e=>{try{a(s,"Getting dashboard data","info",{consultantId:e});const t=await w(),{data:r,error:i}=await t.from("consultant_assignments").select("*, user:user_id(id, first_name, last_name, last_active_at)").eq("consultant_id",e);if(i)throw o(i,"Failed to fetch assigned readers",s);const n=r.map(S=>S.user_id),{data:c,error:d}=await t.from("help_requests").select("*, reader:user_id(first_name, last_name)").in("user_id",n);if(d)throw o(d,"Failed to fetch help requests",s);const{data:h,error:p}=await t.from("user_feedback").select("*, reader:user_id(first_name, last_name)").in("user_id",n);if(p)throw o(p,"Failed to fetch feedback",s);const{data:q,error:m}=await t.rpc("get_consultant_dashboard_stats",{p_consultant_id:e});if(m)throw o(m,"Failed to fetch dashboard stats",s);return{assignedReaders:r,helpRequests:c,feedback:h,stats:q}}catch(t){throw o(t,"consultantService","getDashboardData")}},sendAIInteractionPrompt:async(e,t)=>{var r,i;try{a(s,"Sending AI interaction prompt","info",{userId:e,promptContent:t});const{data:n}=await u.auth.getSession(),c=(i=(r=n.session)==null?void 0:r.user)==null?void 0:i.id;if(!c)throw new C(F.AuthenticationError,"Consultant not authenticated.");const{error:d}=await u.from("interactions").insert({user_id:e,event_type:"ai_prompt_sent",content:t,context:{consultant_id:c,book_id:f.ALICE}});if(d)throw o(d,"Failed to send AI interaction prompt",s);a(s,"AI interaction prompt sent successfully","success")}catch(n){throw o(n,"consultantService","sendAIInteractionPrompt")}},getReaderEngagementMetrics:async()=>{try{a(s,"Getting reader engagement metrics","info");const{data:e,error:t}=await u.from("profiles").select("id, last_active_at");if(t)throw o(t,"Failed to fetch profiles for engagement metrics",s);const r=e.filter(n=>{if(!n.last_active_at)return!1;const c=new Date(n.last_active_at),d=new Date(Date.now()-7*24*60*60*1e3);return c>d}).length,i=e.filter(n=>{if(!n.last_active_at)return!1;const c=new Date(n.last_active_at),d=new Date(Date.now()-30*24*60*60*1e3);return c>d}).length;return{totalReaders:e.length,activeReadersLast7Days:r,activeReadersLast30Days:i,averageSessionDuration:"N/A",readingStreaks:"N/A"}}catch(e){throw o(e,"consultantService","getReaderEngagementMetrics")}},getHelpRequestTrends:async()=>{try{a(s,"Getting help request trends","info");const{data:e,error:t}=await u.from("help_requests").select("created_at");if(t)throw o(t,"Failed to fetch help requests for trends",s);const r={};return e.forEach(n=>{const c=new Date(n.created_at).toISOString().split("T")[0];r[c]=(r[c]||0)+1}),Object.keys(r).map(n=>({date:n,count:r[n]})).sort((n,c)=>new Date(n.date).getTime()-new Date(c.date).getTime())}catch(e){throw o(e,"consultantService","getHelpRequestTrends")}}});async function D(){return(await _.getService("consultantService")).checkIsConsultant()}async function L(){return(await _.getService("consultantService")).getVerifiedReaders()}async function P(l,e=f.ALICE){return(await _.getService("consultantService")).getUserReadingDetails(l,e)}async function G(l=f.ALICE){return(await _.getService("consultantService")).getPendingHelpRequests(l)}async function U(l,e=f.ALICE){return(await _.getService("consultantService")).getAssignedHelpRequests(l,e)}async function H(l,e,t){return(await _.getService("consultantService")).updateHelpRequestStatus(l,e,t)}async function T(l=f.ALICE){return(await _.getService("consultantService")).getAllFeedback(l)}async function N(l=f.ALICE){return(await _.getService("consultantService")).getPublicFeedback(l)}async function $(l,e=f.ALICE,t,r){return(await _.getService("consultantService")).createConsultantTrigger(l,e,t,r)}async function I(l){return(await _.getService("consultantService")).getUserTriggers(l)}async function O(l){return(await _.getService("consultantService")).markTriggerProcessed(l)}async function V(l,e,t){return(await _.getService("consultantService")).logConsultantAction(l,e,t)}async function B(l,e=f.ALICE,t,r,i,n=!1){return(await _.getService("consultantService")).submitFeedback(l,e,t,r,i,n)}async function M(l,e=f.ALICE,t,r,i){return(await _.getService("consultantService")).submitHelpRequest(l,e,t,r,i)}async function x(l,e=f.ALICE){return(await _.getService("consultantService")).getUserHelpRequests(l,e)}async function W(l,e=f.ALICE){return(await _.getService("consultantService")).getUserFeedback(l,e)}async function j(){return(await _.getService("consultantService")).getConsultantAssignments()}async function J(){return(await _.getService("consultantService")).getConsultantStats()}async function Z(l,e){return(await _.getService("consultantService")).getReaderInteractions(l,e)}const ee={checkIsConsultant:D,getVerifiedReaders:L,getUserReadingDetails:P,getPendingHelpRequests:G,getAssignedHelpRequests:U,updateHelpRequestStatus:H,getAllFeedback:T,getPublicFeedback:N,createConsultantTrigger:$,getUserTriggers:I,markTriggerProcessed:O,logConsultantAction:V,submitFeedback:B,submitHelpRequest:M,getUserHelpRequests:x,getUserFeedback:W,getConsultantAssignments:j,getConsultantStats:J};export{D as checkIsConsultant,Y as createConsultantService,$ as createConsultantTrigger,ee as default,T as getAllFeedback,U as getAssignedHelpRequests,j as getConsultantAssignments,J as getConsultantStats,G as getPendingHelpRequests,N as getPublicFeedback,Z as getReaderInteractions,W as getUserFeedback,x as getUserHelpRequests,P as getUserReadingDetails,I as getUserTriggers,L as getVerifiedReaders,V as logConsultantAction,O as markTriggerProcessed,B as submitFeedback,M as submitHelpRequest,H as updateHelpRequestStatus};
