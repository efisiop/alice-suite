import{a}from"./index-81c07cf2.js";import{r as g,B as d,h as o}from"./App-49df8fbc.js";import{g as S}from"./supabaseClient-510d7de7.js";import"./supabase-215a852a.js";import"./vendor-91e15b2e.js";import"./ui-c2c9966d.js";const s="ConsultantService",z=async()=>(a(s,"Creating consultant service","info"),{checkIsConsultant:async()=>{try{a(s,"Checking if current user is a consultant","info");const e=await S(),{data:t,error:r}=await e.rpc("is_consultant");return r?(a(s,"Error checking consultant status","error",r),!1):t===!0}catch(e){throw o(e,"consultantService","checkIsConsultant")}},getVerifiedReaders:async()=>{try{const{data:e,error:t}=await supabase.from("profiles").select("*").eq("is_verified",!0);if(t)throw t;return a(s,`Found ${e.length} verified readers`,"success"),e.map(r=>({id:r.id,first_name:r.first_name,last_name:r.last_name,email:r.email,created_at:r.created_at,book_verified:!!r.book_verified,is_verified:!!r.is_verified,is_consultant:!!r.is_consultant,updated_at:r.updated_at||r.created_at}))}catch(e){return o(e,"Failed to fetch verified readers",s),[]}},getUserReadingDetails:async(e,t=d.ALICE)=>{try{a(s,"Getting user reading details","info",{userId:e,bookId:t});const{data:r,error:n}=await supabase.from("profiles").select("*").eq("id",e).single();if(n)throw o(n,"Failed to fetch user profile",s);const{data:c,error:u}=await supabase.from("reading_progress").select("*").eq("user_id",e).eq("book_id",t).single();if(u&&u.code!=="PGRST116")throw o(u,"Failed to fetch reading progress",s);const{data:f,error:_}=await supabase.from("reading_stats").select("*").eq("user_id",e).eq("book_id",t).single();if(_&&_.code!=="PGRST116")throw o(_,"Failed to fetch reading stats",s);const{data:p,error:w}=await supabase.from("interactions").select("*").eq("user_id",e).eq("book_id",t).order("created_at",{ascending:!1});if(w)throw o(w,"Failed to fetch user interactions",s);const{data:b,error:q}=await supabase.from("feedback").select("*").eq("user_id",e).eq("book_id",t).order("created_at",{ascending:!1});if(q)throw o(q,"Failed to fetch user feedback",s);const{data:y,error:v}=await supabase.from("help_requests").select("*").eq("user_id",e).eq("book_id",t).order("created_at",{ascending:!1});if(v)throw o(v,"Failed to fetch help requests",s);const{data:m,error:E}=await supabase.from("consultant_actions").select("*").eq("user_id",e).eq("book_id",t).order("created_at",{ascending:!1});if(E)throw o(E,"Failed to fetch consultant actions",s);try{await(await S()).rpc("log_consultant_action",{p_user_id:e,p_action_type:"VIEW_PROFILE",p_details:{book_id:t}})}catch(k){a(s,"Error logging profile view","warning",k)}return{profile:{id:r.id,first_name:r.first_name,last_name:r.last_name,email:r.email,created_at:r.created_at,book_verified:!!r.book_verified,is_verified:!!r.is_verified,is_consultant:!!r.is_consultant,updated_at:r.updated_at||r.created_at},progress:c||{},stats:f||{},activity:{interactions:p||[],feedback:b||[],helpRequests:y||[],consultantActions:m||[]}}}catch(r){throw o(r,"Failed to fetch user reading details",s)}},getPendingHelpRequests:async(e=d.ALICE)=>{try{a(s,"Getting pending help requests","info",{bookId:e});const{data:t,error:r}=await supabase.from("help_requests").select(`
        *,
        profiles (
          first_name,
          last_name,
          email
        )
      `).eq("book_id",e).eq("status","pending").order("created_at",{ascending:!0});if(r)throw o(r,"Failed to fetch pending help requests",s);return t||[]}catch(t){throw o(t,"Failed to fetch pending help requests",s)}},getAssignedHelpRequests:async(e,t=d.ALICE)=>{try{a(s,"Getting assigned help requests","info",{consultantId:e,bookId:t});const{data:r,error:n}=await supabase.from("help_requests").select(`
        *,
        profiles (
          first_name,
          last_name,
          email
        )
      `).eq("book_id",t).eq("consultant_id",e).neq("status","closed").order("created_at",{ascending:!0});if(n)throw o(n,"Failed to fetch assigned help requests",s);return r||[]}catch(r){throw o(r,"Failed to fetch assigned help requests",s)}},updateHelpRequestStatus:async(e,t,r)=>{try{a(s,"Updating help request status","info",{requestId:e,status:t,consultantId:r});const n={status:t,updated_at:new Date().toISOString()};r&&(n.consultant_id=r);const{data:c,error:u}=await supabase.from("help_requests").update(n).eq("id",e).select().single();if(u)throw o(u,"Failed to update help request status",s);return c}catch(n){throw o(n,"Failed to update help request status",s)}},getAllFeedback:async(e=d.ALICE)=>{try{a(s,"Getting all feedback","info",{bookId:e});const{data:t,error:r}=await supabase.from("user_feedback").select(`
        *,
        user:user_id (id, first_name, last_name, email),
        section:section_id (
          id, title,
          chapter:chapter_id (id, title)
        )
      `).eq("book_id",e).order("created_at",{ascending:!1});return r?(a(s,"Error fetching all feedback","error",r),[]):(a(s,`Found ${t.length} feedback items`,"success"),t)}catch(t){throw o(t,"consultantService","getAllFeedback")}},getPublicFeedback:async(e=d.ALICE)=>{try{a(s,"Getting public feedback","info",{bookId:e});const{data:t,error:r}=await supabase.from("user_feedback").select(`
        *,
        user:user_id (id, first_name, last_name),
        section:section_id (
          id, title,
          chapter:chapter_id (id, title)
        )
      `).eq("book_id",e).eq("is_public",!0).order("created_at",{ascending:!1});return r?(a(s,"Error fetching public feedback","error",r),[]):(a(s,`Found ${t.length} public feedback items`,"success"),t)}catch(t){throw o(t,"consultantService","getPublicFeedback")}},createConsultantTrigger:async(e,t=d.ALICE,r,n)=>{try{a(s,"Creating consultant trigger","info",{userId:e,bookId:t,triggerType:r,message:n});const c=await S(),{data:u,error:f}=await c.rpc("create_consultant_trigger",{p_user_id:e,p_book_id:t,p_trigger_type:r,p_message:n});return f?(a(s,"Error creating consultant trigger","error",f),null):(a(s,"Consultant trigger created successfully","success"),u)}catch(c){throw o(c,"consultantService","createConsultantTrigger")}},getUserTriggers:async e=>{try{a(s,"Getting user triggers","info",{userId:e});const{data:t,error:r}=await supabase.from("consultant_triggers").select(`
        *,
        consultant:consultant_id (id, first_name, last_name)
      `).eq("user_id",e).eq("is_processed",!1).order("created_at",{ascending:!1});return r?(a(s,"Error fetching user triggers","error",r),[]):(a(s,`Found ${t.length} unprocessed triggers`,"success"),t)}catch(t){throw o(t,"consultantService","getUserTriggers")}},markTriggerProcessed:async e=>{try{a(s,"Marking trigger as processed","info",{triggerId:e});const{error:t}=await supabase.from("consultant_triggers").update({is_processed:!0,processed_at:new Date().toISOString()}).eq("id",e);return t?(a(s,"Error marking trigger as processed","error",t),!1):(a(s,"Trigger marked as processed successfully","success"),!0)}catch(t){throw o(t,"consultantService","markTriggerProcessed")}},logConsultantAction:async(e,t,r)=>{try{a(s,"Logging consultant action","info",{userId:e,actionType:t,details:r});const n=await S(),{data:c,error:u}=await n.rpc("log_consultant_action",{p_user_id:e,p_consultant_id:user==null?void 0:user.id,p_action_type:t,p_details:r?JSON.stringify(r):null});return u?(a(s,"Error logging consultant action","error",u),null):(a(s,"Consultant action logged successfully","success"),c)}catch(n){throw o(n,"consultantService","logConsultantAction")}},submitFeedback:async(e,t=d.ALICE,r,n,c,u=!1)=>{try{a(s,"Submitting user feedback","info",{userId:e,bookId:t,feedbackType:r,sectionId:c,isPublic:u});const{data:f,error:_}=await supabase.from("user_feedback").insert({user_id:e,book_id:t,section_id:c||null,feedback_type:r,content:n,is_public:u}).select().single();return _?(a(s,"Error submitting feedback","error",_),null):(a(s,"Feedback submitted successfully","success"),f)}catch(f){throw o(f,"consultantService","submitFeedback")}},submitHelpRequest:async(e,t=d.ALICE,r,n,c)=>{try{a(s,"Submitting help request","info",{userId:e,bookId:t,sectionId:n,context:c});const{data:u,error:f}=await supabase.from("help_requests").insert({user_id:e,book_id:t,section_id:n||null,status:HelpRequestStatus.PENDING,content:r,context:c||null}).select().single();return f?(a(s,"Error submitting help request","error",f),null):(a(s,"Help request submitted successfully","success"),u)}catch(u){throw o(u,"consultantService","submitHelpRequest")}},getUserHelpRequests:async(e,t=d.ALICE)=>{try{a(s,"Getting user help requests","info",{userId:e,bookId:t});const{data:r,error:n}=await supabase.from("help_requests").select(`
        *,
        consultant:assigned_to (id, first_name, last_name),
        section:section_id (
          id, title,
          chapter:chapter_id (id, title)
        )
      `).eq("user_id",e).eq("book_id",t).order("created_at",{ascending:!1});return n?(a(s,"Error fetching user help requests","error",n),[]):(a(s,`Found ${r.length} help requests`,"success"),r)}catch(r){throw o(r,"consultantService","getUserHelpRequests")}},getUserFeedback:async(e,t=d.ALICE)=>{try{a(s,"Getting user feedback","info",{userId:e,bookId:t});const{data:r,error:n}=await supabase.from("user_feedback").select(`
        *,
        section:section_id (
          id, title,
          chapter:chapter_id (id, title)
        )
      `).eq("user_id",e).eq("book_id",t).order("created_at",{ascending:!1});return n?(a(s,"Error fetching user feedback","error",n),[]):(a(s,`Found ${r.length} feedback items`,"success"),r)}catch(r){throw o(r,"consultantService","getUserFeedback")}},getConsultantAssignments:async()=>{try{return[{id:"1",user_id:"mock-user-id",profiles:{first_name:"Alice",last_name:"Reader",email:"alice@example.com"}}]}catch(e){throw o(e,"consultantService","getConsultantAssignments")}},getConsultantStats:async()=>{var e;try{a(s,"Getting consultant dashboard statistics","info");const t=await S(),{data:r}=await t.auth.getSession();if(!((e=r.session)!=null&&e.user))return a(s,"No authenticated user found","warning"),null;const n=r.session.user.id,{data:c,error:u}=await supabase.from("consultant_assignments").select("*, user:user_id(id, first_name, last_name)").eq("consultant_id",n).eq("active",!0);if(u)return a(s,"Error fetching assignments","error",u),null;const{data:f,error:_}=await supabase.from("help_requests").select("*").or(`assigned_to.eq.${n},status.eq.${HelpRequestStatus.PENDING}`);if(_)return a(s,"Error fetching help requests","error",_),null;const{data:p,error:w}=await supabase.from("user_feedback").select("*").in("user_id",(c==null?void 0:c.map(l=>l.user_id))||[]);if(w)return a(s,"Error fetching feedback","error",w),null;const{data:b,error:q}=await supabase.from("consultant_actions_log").select("*, user:user_id(id, first_name, last_name)").eq("consultant_id",n).order("created_at",{ascending:!1}).limit(10);if(q)return a(s,"Error fetching recent actions","error",q),null;const y=new Date,v=new Date(y.getTime()-7*24*60*60*1e3),m={high:0,medium:0,low:0};c==null||c.forEach(l=>{if(!l.last_active_at){m.low++;return}const h=new Date(l.last_active_at);h>v?m.high++:h>new Date(y.getTime()-14*24*60*60*1e3)?m.medium++:m.low++});const E=(b==null?void 0:b.map(l=>{let h="Unknown action";switch(l.action_type){case"TRIGGER_PROMPT":h="Sent a prompt to reader";break;case"UPDATE_HELP_REQUEST":h="Updated help request status";break;case"VIEW_READER_PROFILE":h="Viewed reader profile";break;default:h=`${l.action_type}`}return{id:l.id,type:l.action_type.toLowerCase(),userId:l.user_id,userName:l.user?`${l.user.first_name} ${l.user.last_name}`:"Unknown User",timestamp:l.created_at,description:h}}))||[],k={totalReaders:(c==null?void 0:c.length)||0,activeReaders:(c==null?void 0:c.filter(l=>l.last_active_at&&new Date(l.last_active_at)>v).length)||0,pendingRequests:(f==null?void 0:f.filter(l=>l.status===HelpRequestStatus.PENDING).length)||0,resolvedRequests:(f==null?void 0:f.filter(l=>l.status===HelpRequestStatus.RESOLVED).length)||0,totalFeedback:(p==null?void 0:p.length)||0,recentFeedback:(p==null?void 0:p.filter(l=>new Date(l.created_at)>v).length)||0,readerEngagement:m,recentActivity:E};return a(s,"Consultant stats retrieved successfully","success"),k}catch(t){throw o(t,"consultantService","getConsultantStats")}},getHelpRequests:async e=>{try{a(s,"Getting help requests","info",{statusFilter:e});let t=supabase.from("help_requests").select(`
        *,
        user:user_id (
          id,
          first_name,
          last_name,
          email
        ),
        consultant:assigned_to (
          id,
          first_name,
          last_name
        ),
        section:section_id (
          id,
          title,
          chapter:chapter_id (
            id,
            title
          )
        )
      `).order("created_at",{ascending:!1});e&&(t=t.eq("status",e));const{data:r,error:n}=await t;return n?(a(s,"Error fetching help requests","error",n),[]):(a(s,`Found ${r.length} help requests`,"success"),r)}catch(t){throw o(t,"consultantService","getHelpRequests")}},getReaderInteractions:async(e,t)=>{try{a(s,"Getting reader interactions","info",{userId:e,eventType:t});let r=supabase.from("interactions").select(`
        id,
        user_id,
        event_type,
        book_id,
        section_id,
        page_number,
        content,
        context,
        created_at,
        profiles (first_name, last_name, email)
      `).order("created_at",{ascending:!1});e&&(r=r.eq("user_id",e)),t&&(r=r.eq("event_type",t));const{data:n,error:c}=await r;return c?(a(s,"Error fetching reader interactions","error",c),[]):(a(s,`Found ${n.length} reader interactions`,"success"),n.map(u=>({...u,user_name:u.profiles?`${u.profiles.first_name} ${u.profiles.last_name}`:"Unknown User",user_email:u.profiles?u.profiles.email:"Unknown Email"})))}catch(r){throw o(r,"consultantService","getReaderInteractions")}}});async function C(){return(await g.getService("consultantService")).checkIsConsultant()}async function R(){return(await g.getService("consultantService")).getVerifiedReaders()}async function A(i,e=d.ALICE){return(await g.getService("consultantService")).getUserReadingDetails(i,e)}async function F(i=d.ALICE){return(await g.getService("consultantService")).getPendingHelpRequests(i)}async function L(i,e=d.ALICE){return(await g.getService("consultantService")).getAssignedHelpRequests(i,e)}async function H(i,e,t){return(await g.getService("consultantService")).updateHelpRequestStatus(i,e,t)}async function U(i=d.ALICE){return(await g.getService("consultantService")).getAllFeedback(i)}async function P(i=d.ALICE){return(await g.getService("consultantService")).getPublicFeedback(i)}async function D(i,e=d.ALICE,t,r){return(await g.getService("consultantService")).createConsultantTrigger(i,e,t,r)}async function G(i){return(await g.getService("consultantService")).getUserTriggers(i)}async function T(i){return(await g.getService("consultantService")).markTriggerProcessed(i)}async function $(i,e,t){return(await g.getService("consultantService")).logConsultantAction(i,e,t)}async function N(i,e=d.ALICE,t,r,n,c=!1){return(await g.getService("consultantService")).submitFeedback(i,e,t,r,n,c)}async function O(i,e=d.ALICE,t,r,n){return(await g.getService("consultantService")).submitHelpRequest(i,e,t,r,n)}async function B(i,e=d.ALICE){return(await g.getService("consultantService")).getUserHelpRequests(i,e)}async function V(i,e=d.ALICE){return(await g.getService("consultantService")).getUserFeedback(i,e)}async function x(){return(await g.getService("consultantService")).getConsultantAssignments()}async function M(){return(await g.getService("consultantService")).getConsultantStats()}async function X(i,e){return(await g.getService("consultantService")).getReaderInteractions(i,e)}const Y={checkIsConsultant:C,getVerifiedReaders:R,getUserReadingDetails:A,getPendingHelpRequests:F,getAssignedHelpRequests:L,updateHelpRequestStatus:H,getAllFeedback:U,getPublicFeedback:P,createConsultantTrigger:D,getUserTriggers:G,markTriggerProcessed:T,logConsultantAction:$,submitFeedback:N,submitHelpRequest:O,getUserHelpRequests:B,getUserFeedback:V,getConsultantAssignments:x,getConsultantStats:M};export{C as checkIsConsultant,z as createConsultantService,D as createConsultantTrigger,Y as default,U as getAllFeedback,L as getAssignedHelpRequests,x as getConsultantAssignments,M as getConsultantStats,F as getPendingHelpRequests,P as getPublicFeedback,X as getReaderInteractions,V as getUserFeedback,B as getUserHelpRequests,A as getUserReadingDetails,G as getUserTriggers,R as getVerifiedReaders,$ as logConsultantAction,T as markTriggerProcessed,N as submitFeedback,O as submitHelpRequest,H as updateHelpRequestStatus};
