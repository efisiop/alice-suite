{"version":3,"sources":["../src/utils/supabase.ts","../src/auth/auth-client.ts","../src/database/database-client.ts","../src/utils/id-utils.ts","../src/types/database.ts"],"sourcesContent":["// Supabase client utility for Alice Suite applications\n\nimport { createClient } from '@supabase/supabase-js'\nimport type { Database } from '../types/database'\n\n// Global configuration that can be set by consuming applications\ninterface SupabaseConfig {\n  url: string\n  anonKey: string\n}\n\nlet supabaseConfig: SupabaseConfig | null = null\nlet supabaseInstance: ReturnType<typeof createClient<Database>> | null = null\n\n// Create a factory function to initialize the client\nexport const createSupabaseClient = (url: string, anonKey: string) => {\n  if (!url || !anonKey) {\n    throw new Error('supabaseUrl and supabaseAnonKey are required.')\n  }\n  \n  return createClient<Database>(url, anonKey, {\n    auth: {\n      persistSession: true,\n      autoRefreshToken: true,\n    },\n  })\n}\n\n// Initialize the Supabase client with configuration\nexport const initializeSupabase = (config: SupabaseConfig) => {\n  supabaseConfig = config\n  supabaseInstance = createSupabaseClient(config.url, config.anonKey)\n  return supabaseInstance\n}\n\n// Get the initialized Supabase client\nexport const getSupabaseClient = () => {\n  if (!supabaseInstance) {\n    throw new Error('Supabase client not initialized. Call initializeSupabase() first with your environment variables.')\n  }\n  return supabaseInstance\n}\n\n// Export a function that returns the client for backward compatibility\n// Note: This is deprecated, use getSupabaseClient() instead\nexport const supabase = () => getSupabaseClient()\n\nexport type SupabaseClient = ReturnType<typeof createClient<Database>>\n\n// Helper function to validate configuration\nexport function validateSupabaseConfig(config: Partial<SupabaseConfig>): boolean {\n  return !!(config.url && config.anonKey)\n} ","// Authentication client for Alice Suite applications\n\nimport { getSupabaseClient } from '../utils/supabase'\nimport type { \n  AuthUser, \n  AuthError, \n  SignInCredentials, \n  SignUpCredentials,\n  AuthStateChangeEvent,\n  AuthEventData\n} from '../types/auth'\nimport type { Profile } from '../types/database'\n\nexport class AuthClient {\n  private get supabase() {\n    return getSupabaseClient()\n  }\n  async signIn(credentials: SignInCredentials): Promise<{ user: AuthUser | null; error: AuthError | null }> {\n    try {\n      const { data, error } = await this.supabase.auth.signInWithPassword({\n        email: credentials.email,\n        password: credentials.password,\n      })\n\n      if (error) {\n        return { user: null, error: { message: error.message, code: error.code } }\n      }\n\n      if (!data.user) {\n        return { user: null, error: { message: 'No user found' } }\n      }\n\n      // Fetch user profile\n      const { data: profile, error: profileError } = await this.supabase\n        .from('profiles')\n        .select('*')\n        .eq('id', data.user.id)\n        .single()\n\n      if (profileError) {\n        return { user: null, error: { message: profileError.message } }\n      }\n\n      const user: AuthUser = {\n        id: data.user.id,\n        email: data.user.email!,\n        role: profile.is_consultant ? 'consultant' : 'reader',\n        fullName: `${profile.first_name} ${profile.last_name}`,\n        firstName: profile.first_name,\n        lastName: profile.last_name,\n        isConsultant: profile.is_consultant,\n      }\n\n      return { user, error: null }\n    } catch (error) {\n      return { user: null, error: { message: 'An unexpected error occurred' } }\n    }\n  }\n\n  async signUp(credentials: SignUpCredentials): Promise<{ user: AuthUser | null; error: AuthError | null }> {\n    try {\n      const { data, error } = await this.supabase.auth.signUp({\n        email: credentials.email,\n        password: credentials.password,\n      })\n\n      if (error) {\n        return { user: null, error: { message: error.message, code: error.code } }\n      }\n\n      if (!data.user) {\n        return { user: null, error: { message: 'User creation failed' } }\n      }\n\n      // Create user profile\n      const profileData: Profile = {\n        id: data.user.id,\n        first_name: credentials.firstName,\n        last_name: credentials.lastName,\n        email: credentials.email,\n        is_consultant: credentials.isConsultant || false,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      }\n\n      const { error: profileError } = await this.supabase\n        .from('profiles')\n        .insert(profileData)\n\n      if (profileError) {\n        return { user: null, error: { message: profileError.message } }\n      }\n\n      const user: AuthUser = {\n        id: data.user.id,\n        email: data.user.email!,\n        role: profileData.is_consultant ? 'consultant' : 'reader',\n        fullName: `${profileData.first_name} ${profileData.last_name}`,\n        firstName: profileData.first_name,\n        lastName: profileData.last_name,\n        isConsultant: profileData.is_consultant,\n      }\n\n      return { user, error: null }\n    } catch (error) {\n      return { user: null, error: { message: 'An unexpected error occurred' } }\n    }\n  }\n\n  async signOut(): Promise<{ error: AuthError | null }> {\n    try {\n      const { error } = await this.supabase.auth.signOut()\n      return { error: error ? { message: error.message } : null }\n    } catch (error) {\n      return { error: { message: 'An unexpected error occurred' } }\n    }\n  }\n\n  async getCurrentUser(): Promise<{ user: AuthUser | null; error: AuthError | null }> {\n    try {\n      const { data: { user: authUser }, error: authError } = await this.supabase.auth.getUser()\n      \n      if (authError || !authUser) {\n        return { user: null, error: authError ? { message: authError.message } : null }\n      }\n\n      const { data: profile, error: profileError } = await this.supabase\n        .from('profiles')\n        .select('*')\n        .eq('id', authUser.id)\n        .single()\n\n      if (profileError) {\n        return { user: null, error: { message: profileError.message } }\n      }\n\n      const user: AuthUser = {\n        id: authUser.id,\n        email: authUser.email!,\n        role: profile.is_consultant ? 'consultant' : 'reader',\n        fullName: `${profile.first_name} ${profile.last_name}`,\n        firstName: profile.first_name,\n        lastName: profile.last_name,\n        isConsultant: profile.is_consultant,\n      }\n\n      return { user, error: null }\n    } catch (error) {\n      return { user: null, error: { message: 'An unexpected error occurred' } }\n    }\n  }\n\n  async updateProfile(updates: Partial<Profile>): Promise<{ user: AuthUser | null; error: AuthError | null }> {\n    try {\n      const { data: { user: authUser }, error: authError } = await this.supabase.auth.getUser()\n      \n      if (authError || !authUser) {\n        return { user: null, error: { message: 'Not authenticated' } }\n      }\n\n      const { data: profile, error: profileError } = await this.supabase\n        .from('profiles')\n        .update({ ...updates, updated_at: new Date().toISOString() })\n        .eq('id', authUser.id)\n        .select()\n        .single()\n\n      if (profileError) {\n        return { user: null, error: { message: profileError.message } }\n      }\n\n      const user: AuthUser = {\n        id: authUser.id,\n        email: authUser.email!,\n        role: profile.is_consultant ? 'consultant' : 'reader',\n        fullName: `${profile.first_name} ${profile.last_name}`,\n        firstName: profile.first_name,\n        lastName: profile.last_name,\n        isConsultant: profile.is_consultant,\n      }\n\n      return { user, error: null }\n    } catch (error) {\n      return { user: null, error: { message: 'An unexpected error occurred' } }\n    }\n  }\n\n  onAuthStateChange(callback: (event: AuthStateChangeEvent) => void) {\n    return this.supabase.auth.onAuthStateChange((event: string, session: any) => {\n      callback({ event: event as any, session })\n    })\n  }\n\n  async resetPassword(email: string): Promise<{ error: AuthError | null }> {\n    try {\n      const { error } = await this.supabase.auth.resetPasswordForEmail(email)\n      return { error: error ? { message: error.message } : null }\n    } catch (error) {\n      return { error: { message: 'An unexpected error occurred' } }\n    }\n  }\n\n  async emitAuthEvent(event: AuthEventData): Promise<{ error: AuthError | null }> {\n    try {\n      // Emit auth event to realtime server\n      const realtimeUrl = process.env.REACT_APP_REALTIME_URL || 'http://localhost:3001'\n      \n      // Use fetch to emit event to realtime server\n      const response = await fetch(`${realtimeUrl}/api/auth-events`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(event)\n      })\n\n      if (!response.ok) {\n        throw new Error(`Failed to emit auth event: ${response.statusText}`)\n      }\n\n      return { error: null }\n    } catch (error) {\n      console.warn('Failed to emit auth event:', error)\n      return { error: { message: 'Failed to emit auth event' } }\n    }\n  }\n}\n\nexport const authClient = new AuthClient() ","// Database client for Alice Suite applications\n\nimport { getSupabaseClient } from '../utils/supabase'\nimport type { \n  Profile, \n  Book, \n  Chapter, \n  Section, \n  ReadingProgress, \n  ReadingStats,\n  BookWithChapters,\n  SectionWithChapter,\n  BookProgress,\n  BookStats,\n  UserFeedback,\n  HelpRequest,\n  ConsultantTrigger,\n  ConsultantAction,\n  UserId,\n  BookId,\n  ChapterId,\n  SectionId\n} from '../types/database'\n\nexport class DatabaseClient {\n  private get supabase() {\n    return getSupabaseClient()\n  }\n  // Profile operations\n  async getProfile(userId: UserId): Promise<{ data: Profile | null; error: Error | null }> {\n    const { data, error } = await this.supabase\n      .from('profiles')\n      .select('*')\n      .eq('id', userId)\n      .single()\n    \n    return { data, error }\n  }\n\n  async updateProfile(userId: UserId, updates: Partial<Profile>): Promise<{ data: Profile | null; error: Error | null }> {\n    const { data, error } = await this.supabase\n      .from('profiles')\n      .update({ ...updates, updated_at: new Date().toISOString() })\n      .eq('id', userId)\n      .select()\n      .single()\n    \n    return { data, error }\n  }\n\n  // Book operations\n  async getBook(bookId: BookId): Promise<{ data: Book | null; error: Error | null }> {\n    const { data, error } = await this.supabase\n      .from('books')\n      .select('*')\n      .eq('id', bookId)\n      .single()\n    \n    return { data, error }\n  }\n\n  async getBookWithChapters(bookId: BookId): Promise<{ data: BookWithChapters | null; error: Error | null }> {\n    const { data: book, error: bookError } = await this.supabase\n      .from('books')\n      .select('*')\n      .eq('id', bookId)\n      .single()\n\n    if (bookError) return { data: null, error: bookError }\n\n    const { data: chapters, error: chaptersError } = await this.supabase\n      .from('chapters')\n      .select(`\n        *,\n        sections (*)\n      `)\n      .eq('book_id', bookId)\n      .order('number')\n\n    if (chaptersError) return { data: null, error: chaptersError }\n\n    const bookWithChapters: BookWithChapters = {\n      ...book,\n      chapters: chapters || []\n    }\n\n    return { data: bookWithChapters, error: null }\n  }\n\n  // Chapter operations\n  async getChapters(bookId: BookId): Promise<{ data: Chapter[] | null; error: Error | null }> {\n    const { data, error } = await this.supabase\n      .from('chapters')\n      .select('*')\n      .eq('book_id', bookId)\n      .order('number')\n    \n    return { data, error }\n  }\n\n  // Section operations\n  async getSections(chapterId: ChapterId): Promise<{ data: Section[] | null; error: Error | null }> {\n    const { data, error } = await this.supabase\n      .from('sections')\n      .select('*')\n      .eq('chapter_id', chapterId)\n      .order('number')\n    \n    return { data, error }\n  }\n\n  async getSection(sectionId: SectionId): Promise<{ data: Section | null; error: Error | null }> {\n    const { data, error } = await this.supabase\n      .from('sections')\n      .select('*')\n      .eq('id', sectionId)\n      .single()\n    \n    return { data, error }\n  }\n\n  async getSectionsForPage(bookId: BookId, pageNumber: number): Promise<{ data: SectionWithChapter[] | null; error: Error | null }> {\n    const { data, error } = await this.supabase\n      .rpc('get_sections_for_page', {\n        book_id_param: bookId,\n        page_number_param: pageNumber\n      })\n    \n    return { data, error }\n  }\n\n  // Reading progress operations\n  async getReadingProgress(userId: UserId, bookId: BookId): Promise<{ data: ReadingProgress[] | null; error: Error | null }> {\n    const { data, error } = await this.supabase\n      .from('reading_progress')\n      .select('*')\n      .eq('user_id', userId)\n      .eq('book_id', bookId)\n      .order('last_read_at', { ascending: false })\n    \n    return { data, error }\n  }\n\n  async updateReadingProgress(progress: Partial<ReadingProgress>): Promise<{ data: ReadingProgress | null; error: Error | null }> {\n    const { data, error } = await this.supabase\n      .from('reading_progress')\n      .upsert({ \n        ...progress, \n        updated_at: new Date().toISOString() \n      })\n      .select()\n      .single()\n    \n    return { data, error }\n  }\n\n  // Reading stats operations\n  async getReadingStats(userId: UserId, bookId: BookId): Promise<{ data: ReadingStats | null; error: Error | null }> {\n    const { data, error } = await this.supabase\n      .from('reading_stats')\n      .select('*')\n      .eq('user_id', userId)\n      .eq('book_id', bookId)\n      .single()\n    \n    return { data, error }\n  }\n\n  async updateReadingStats(stats: Partial<ReadingStats>): Promise<{ data: ReadingStats | null; error: Error | null }> {\n    const { data, error } = await this.supabase\n      .from('reading_stats')\n      .upsert({ \n        ...stats, \n        updated_at: new Date().toISOString() \n      })\n      .select()\n      .single()\n    \n    return { data, error }\n  }\n\n  // User feedback operations\n  async getUserFeedback(userId: UserId, bookId: BookId): Promise<{ data: UserFeedback[] | null; error: Error | null }> {\n    const { data, error } = await this.supabase\n      .from('user_feedback')\n      .select('*')\n      .eq('user_id', userId)\n      .eq('book_id', bookId)\n      .order('created_at', { ascending: false })\n    \n    return { data, error }\n  }\n\n  async createUserFeedback(feedback: Omit<UserFeedback, 'id' | 'created_at'>): Promise<{ data: UserFeedback | null; error: Error | null }> {\n    const { data, error } = await this.supabase\n      .from('user_feedback')\n      .insert({ \n        ...feedback, \n        created_at: new Date().toISOString() \n      })\n      .select()\n      .single()\n    \n    return { data, error }\n  }\n\n  // Help request operations\n  async getHelpRequests(userId: UserId): Promise<{ data: HelpRequest[] | null; error: Error | null }> {\n    const { data, error } = await this.supabase\n      .from('help_requests')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false })\n    \n    return { data, error }\n  }\n\n  async createHelpRequest(request: Omit<HelpRequest, 'id' | 'created_at' | 'updated_at'>): Promise<{ data: HelpRequest | null; error: Error | null }> {\n    const { data, error } = await this.supabase\n      .from('help_requests')\n      .insert({ \n        ...request, \n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      })\n      .select()\n      .single()\n    \n    return { data, error }\n  }\n\n  async updateHelpRequestStatus(requestId: string, status: string, assignToSelf?: boolean): Promise<{ data: boolean | null; error: Error | null }> {\n    const { data, error } = await this.supabase\n      .rpc('update_help_request_status', {\n        p_request_id: requestId,\n        p_status: status,\n        p_assign_to_self: assignToSelf\n      })\n    \n    return { data, error }\n  }\n\n  // Consultant operations\n  async getConsultantTriggers(consultantId: UserId): Promise<{ data: ConsultantTrigger[] | null; error: Error | null }> {\n    const { data, error } = await this.supabase\n      .from('consultant_triggers')\n      .select('*')\n      .eq('consultant_id', consultantId)\n      .eq('is_processed', false)\n      .order('created_at', { ascending: false })\n    \n    return { data, error }\n  }\n\n  async createConsultantTrigger(trigger: Omit<ConsultantTrigger, 'id' | 'created_at'>): Promise<{ data: ConsultantTrigger | null; error: Error | null }> {\n    const { data, error } = await this.supabase\n      .rpc('create_consultant_trigger', {\n        p_user_id: trigger.user_id,\n        p_book_id: trigger.book_id,\n        p_trigger_type: trigger.trigger_type,\n        p_message: trigger.message\n      })\n    \n    if (error) return { data: null, error }\n    \n    // Fetch the created trigger\n    const { data: createdTrigger, error: fetchError } = await this.supabase\n      .from('consultant_triggers')\n      .select('*')\n      .eq('id', data)\n      .single()\n    \n    return { data: createdTrigger, error: fetchError }\n  }\n\n  async logConsultantAction(action: Omit<ConsultantAction, 'id' | 'created_at'>): Promise<{ data: ConsultantAction | null; error: Error | null }> {\n    const { data, error } = await this.supabase\n      .rpc('log_consultant_action', {\n        p_user_id: action.user_id,\n        p_action_type: action.action_type,\n        p_details: action.details\n      })\n    \n    if (error) return { data: null, error }\n    \n    // Fetch the created action\n    const { data: createdAction, error: fetchError } = await this.supabase\n      .from('consultant_actions_log')\n      .select('*')\n      .eq('id', data)\n      .single()\n    \n    return { data: createdAction, error: fetchError }\n  }\n}\n\nexport const dbClient = new DatabaseClient() ","// ID utility functions for Alice Suite applications\n\n/**\n * Type definitions for entity IDs\n * \n * Using branded types to ensure type safety when working with different ID types\n */\n\n// Base ID type for all entity IDs\nexport type EntityId = string & { readonly _brand: unique symbol };\n\n// Import ID types from database types\nimport type { \n  UserId,\n  BookId,\n  ChapterId,\n  SectionId,\n  ProfileId,\n  DictionaryId,\n  ReadingProgressId,\n  ReadingStatsId,\n  HelpRequestId,\n  FeedbackId,\n  ConsultantTriggerId,\n  ConsultantActionId\n} from '../types/database';\n\n// Re-export ID types\nexport type { \n  UserId,\n  BookId,\n  ChapterId,\n  SectionId,\n  ProfileId,\n  DictionaryId,\n  ReadingProgressId,\n  ReadingStatsId,\n  HelpRequestId,\n  FeedbackId,\n  ConsultantTriggerId,\n  ConsultantActionId\n};\n\n// Type guards\nexport function isUuid(id: string): boolean {\n  return /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(id);\n}\n\n// Type conversion functions\nexport function asUserId(id: string): UserId {\n  return id as UserId;\n}\n\nexport function asBookId(id: string): BookId {\n  return id as BookId;\n}\n\nexport function asChapterId(id: string): ChapterId {\n  return id as ChapterId;\n}\n\nexport function asSectionId(id: string): SectionId {\n  return id as SectionId;\n}\n\nexport function asProfileId(id: string): ProfileId {\n  return id as ProfileId;\n}\n\nexport function asDictionaryId(id: string): DictionaryId {\n  return id as DictionaryId;\n}\n\nexport function asReadingProgressId(id: string): ReadingProgressId {\n  return id as ReadingProgressId;\n}\n\nexport function asReadingStatsId(id: string): ReadingStatsId {\n  return id as ReadingStatsId;\n}\n\nexport function asHelpRequestId(id: string): HelpRequestId {\n  return id as HelpRequestId;\n}\n\nexport function asFeedbackId(id: string): FeedbackId {\n  return id as FeedbackId;\n}\n\nexport function asConsultantTriggerId(id: string): ConsultantTriggerId {\n  return id as ConsultantTriggerId;\n}\n\nexport function asConsultantActionId(id: string): ConsultantActionId {\n  return id as ConsultantActionId;\n}\n\n// Map of string IDs to UUIDs for known books\nconst BOOK_ID_MAP: Record<string, string> = {\n  'alice-in-wonderland': '550e8400-e29b-41d4-a716-446655440000',\n  // Add more mappings as needed\n};\n\n/**\n * Converts a string book ID to a UUID format\n * @param bookId String ID of the book\n * @returns UUID string as BookId type\n */\nexport function getBookUuid(bookId: string): BookId {\n  // If it already looks like a UUID, return it as is\n  if (isUuid(bookId)) {\n    return asBookId(bookId);\n  }\n  \n  // Check if we have a mapping for this string ID\n  const uuid = BOOK_ID_MAP[bookId];\n  \n  if (uuid) {\n    console.log(`[IdUtils] Converted string ID \"${bookId}\" to UUID \"${uuid}\"`);\n    return asBookId(uuid);\n  }\n  \n  // If no mapping exists, log a warning and return the original ID\n  console.warn(`[IdUtils] No UUID mapping found for book ID \"${bookId}\"`);\n  return asBookId(bookId);\n}\n\n/**\n * Gets the string ID for a book UUID\n * @param uuid UUID of the book\n * @returns String ID or the original UUID if no mapping exists\n */\nexport function getBookStringId(uuid: string): string {\n  // Check if this UUID is in our mapping\n  for (const [stringId, bookUuid] of Object.entries(BOOK_ID_MAP)) {\n    if (bookUuid === uuid) {\n      console.log(`[IdUtils] Converted UUID \"${uuid}\" to string ID \"${stringId}\"`);\n      return stringId;\n    }\n  }\n  \n  // If no mapping exists, log a warning and return the original UUID\n  console.warn(`[IdUtils] No string ID mapping found for UUID \"${uuid}\"`);\n  return uuid;\n}\n\n/**\n * Validates a UUID string\n * @param id The ID to validate\n * @returns True if the ID is a valid UUID, false otherwise\n */\nexport function validateUuid(id: string): boolean {\n  return isUuid(id);\n}\n\n/**\n * Generates a new UUID v4\n * @returns A new UUID v4 string\n */\nexport function generateUuid(): string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\n// Constants for commonly used book IDs\nexport const ALICE_BOOK_ID_STRING = 'alice-in-wonderland';\nexport const ALICE_BOOK_ID_UUID = asBookId('550e8400-e29b-41d4-a716-446655440000');\n","// Shared database types for Alice Suite applications\n\nexport type Json =\n  | string\n  | number\n  | boolean\n  | null\n  | { [key: string]: Json | undefined }\n  | Json[]\n\n// ID Types\nexport type UserId = string\nexport type BookId = string\nexport type ChapterId = string\nexport type SectionId = string\nexport type ProfileId = string\nexport type DictionaryId = string\nexport type ReadingProgressId = string\nexport type ReadingStatsId = string\nexport type HelpRequestId = string\nexport type FeedbackId = string\nexport type ConsultantTriggerId = string\nexport type ConsultantActionId = string\n\nexport interface Database {\n  public: {\n    Tables: {\n      profiles: {\n        Row: {\n          id: ProfileId\n          first_name: string\n          last_name: string\n          email: string\n          is_consultant: boolean\n          created_at: string\n          updated_at: string\n        }\n        Insert: {\n          id: UserId\n          first_name: string\n          last_name: string\n          email: string\n          is_consultant?: boolean\n          created_at?: string\n          updated_at?: string\n        }\n        Update: {\n          id?: ProfileId\n          first_name?: string\n          last_name?: string\n          email?: string\n          is_consultant?: boolean\n          created_at?: string\n          updated_at?: string\n        }\n      }\n      books: {\n        Row: {\n          id: BookId\n          title: string\n          author: string\n          description: string | null\n          cover_image_url: string | null\n          total_pages: number\n          created_at: string\n          string_id?: string\n        }\n        Insert: {\n          id?: BookId\n          title: string\n          author: string\n          description?: string | null\n          cover_image_url?: string | null\n          total_pages: number\n          created_at?: string\n          string_id?: string\n        }\n        Update: {\n          id?: BookId\n          title?: string\n          author?: string\n          description?: string | null\n          cover_image_url?: string | null\n          total_pages?: number\n          created_at?: string\n          string_id?: string\n        }\n      }\n      chapters: {\n        Row: {\n          id: ChapterId\n          book_id: BookId\n          title: string\n          number: number\n          created_at: string\n        }\n        Insert: {\n          id?: ChapterId\n          book_id: BookId\n          title: string\n          number: number\n          created_at?: string\n        }\n        Update: {\n          id?: ChapterId\n          book_id?: BookId\n          title?: string\n          number?: number\n          created_at?: string\n        }\n      }\n      sections: {\n        Row: {\n          id: SectionId\n          chapter_id: ChapterId\n          title: string\n          content: string\n          start_page: number\n          end_page: number\n          number: number\n          created_at: string\n        }\n        Insert: {\n          id?: SectionId\n          chapter_id: ChapterId\n          title: string\n          content: string\n          start_page: number\n          end_page: number\n          number: number\n          created_at?: string\n        }\n        Update: {\n          id?: SectionId\n          chapter_id?: ChapterId\n          title?: string\n          content?: string\n          start_page?: number\n          end_page?: number\n          number?: number\n          created_at?: string\n        }\n      }\n      verification_codes: {\n        Row: {\n          code: string\n          book_id: string\n          is_used: boolean\n          used_by: string | null\n          created_at: string\n        }\n        Insert: {\n          code: string\n          book_id: string\n          is_used?: boolean\n          used_by?: string | null\n          created_at?: string\n        }\n        Update: {\n          code?: string\n          book_id?: string\n          is_used?: boolean\n          used_by?: string | null\n          created_at?: string\n        }\n      }\n      dictionary: {\n        Row: {\n          id: DictionaryId\n          book_id: BookId\n          chapter_id: ChapterId | null\n          section_id: SectionId | null\n          term: string\n          definition: string\n          created_at: string\n        }\n        Insert: {\n          id?: DictionaryId\n          book_id: BookId\n          chapter_id?: ChapterId | null\n          section_id?: SectionId | null\n          term: string\n          definition: string\n          created_at?: string\n        }\n        Update: {\n          id?: DictionaryId\n          book_id?: BookId\n          chapter_id?: ChapterId | null\n          section_id?: SectionId | null\n          term?: string\n          definition?: string\n          created_at?: string\n        }\n      }\n      reading_progress: {\n        Row: {\n          id: ReadingProgressId\n          user_id: UserId\n          book_id: BookId\n          section_id: SectionId\n          last_position: string | null\n          last_read_at: string\n          created_at: string\n          updated_at: string\n        }\n        Insert: {\n          id?: ReadingProgressId\n          user_id: UserId\n          book_id: BookId\n          section_id: SectionId\n          last_position?: string | null\n          last_read_at?: string\n          created_at?: string\n          updated_at?: string\n        }\n        Update: {\n          id?: ReadingProgressId\n          user_id?: UserId\n          book_id?: BookId\n          section_id?: SectionId\n          last_position?: string | null\n          last_read_at?: string\n          created_at?: string\n          updated_at?: string\n        }\n      }\n      reading_stats: {\n        Row: {\n          id: ReadingStatsId\n          user_id: UserId\n          book_id: BookId\n          total_reading_time: number\n          pages_read: number\n          last_session_date: string\n          created_at: string\n          updated_at: string\n        }\n        Insert: {\n          id?: ReadingStatsId\n          user_id: UserId\n          book_id: BookId\n          total_reading_time?: number\n          pages_read?: number\n          last_session_date?: string\n          created_at?: string\n          updated_at?: string\n        }\n        Update: {\n          id?: ReadingStatsId\n          user_id?: UserId\n          book_id?: BookId\n          total_reading_time?: number\n          pages_read?: number\n          last_session_date?: string\n          created_at?: string\n          updated_at?: string\n        }\n      }\n      ai_interactions: {\n        Row: {\n          id: string\n          user_id: string\n          book_id: string\n          section_id: string | null\n          question: string\n          context: string | null\n          response: string\n          created_at: string\n        }\n        Insert: {\n          id?: string\n          user_id: string\n          book_id: string\n          section_id?: string | null\n          question: string\n          context?: string | null\n          response: string\n          created_at?: string\n        }\n        Update: {\n          id?: string\n          user_id?: string\n          book_id?: string\n          section_id?: string | null\n          question?: string\n          context?: string | null\n          response?: string\n          created_at?: string\n        }\n      }\n      ai_prompts: {\n        Row: {\n          id: string\n          prompt_text: string\n          prompt_type: string\n          active: boolean\n          created_at: string\n        }\n        Insert: {\n          id?: string\n          prompt_text: string\n          prompt_type: string\n          active?: boolean\n          created_at?: string\n        }\n        Update: {\n          id?: string\n          prompt_text?: string\n          prompt_type?: string\n          active?: boolean\n          created_at?: string\n        }\n      }\n      user_prompt_responses: {\n        Row: {\n          id: string\n          user_id: string\n          prompt_id: string\n          response: string | null\n          created_at: string\n        }\n        Insert: {\n          id?: string\n          user_id: string\n          prompt_id: string\n          response?: string | null\n          created_at?: string\n        }\n        Update: {\n          id?: string\n          user_id?: string\n          prompt_id?: string\n          response?: string | null\n          created_at?: string\n        }\n      }\n      consultant_assignments: {\n        Row: {\n          id: string\n          consultant_id: string\n          user_id: string\n          book_id: string\n          active: boolean\n          created_at: string\n        }\n        Insert: {\n          id?: string\n          consultant_id: string\n          user_id: string\n          book_id: string\n          active?: boolean\n          created_at?: string\n        }\n        Update: {\n          id?: string\n          consultant_id?: string\n          user_id?: string\n          book_id?: string\n          active?: boolean\n          created_at?: string\n        }\n      }\n      consultant_triggers: {\n        Row: {\n          id: string\n          consultant_id: string | null\n          user_id: string\n          book_id: string\n          trigger_type: string\n          message: string | null\n          is_processed: boolean\n          processed_at: string | null\n          created_at: string\n        }\n        Insert: {\n          id?: string\n          consultant_id?: string | null\n          user_id: string\n          book_id: string\n          trigger_type: string\n          message?: string | null\n          is_processed?: boolean\n          processed_at?: string | null\n          created_at?: string\n        }\n        Update: {\n          id?: string\n          consultant_id?: string | null\n          user_id?: string\n          book_id?: string\n          trigger_type?: string\n          message?: string | null\n          is_processed?: boolean\n          processed_at?: string | null\n          created_at?: string\n        }\n      }\n      consultant_users: {\n        Row: {\n          user_id: string\n          is_active: boolean\n          created_at: string\n        }\n        Insert: {\n          user_id: string\n          is_active?: boolean\n          created_at?: string\n        }\n        Update: {\n          user_id?: string\n          is_active?: boolean\n          created_at?: string\n        }\n      }\n      user_feedback: {\n        Row: {\n          id: string\n          user_id: string\n          book_id: string\n          section_id: string | null\n          feedback_type: string\n          content: string\n          is_public: boolean\n          created_at: string\n        }\n        Insert: {\n          id?: string\n          user_id: string\n          book_id: string\n          section_id?: string | null\n          feedback_type: string\n          content: string\n          is_public?: boolean\n          created_at?: string\n        }\n        Update: {\n          id?: string\n          user_id?: string\n          book_id?: string\n          section_id?: string | null\n          feedback_type?: string\n          content?: string\n          is_public?: boolean\n          created_at?: string\n        }\n      }\n      help_requests: {\n        Row: {\n          id: string\n          user_id: string\n          book_id: string\n          section_id: string | null\n          status: string\n          content: string\n          context: string | null\n          assigned_to: string | null\n          resolved_at: string | null\n          created_at: string\n          updated_at: string\n        }\n        Insert: {\n          id?: string\n          user_id: string\n          book_id: string\n          section_id?: string | null\n          status?: string\n          content: string\n          context?: string | null\n          assigned_to?: string | null\n          resolved_at?: string | null\n          created_at?: string\n          updated_at?: string\n        }\n        Update: {\n          id?: string\n          user_id?: string\n          book_id?: string\n          section_id?: string | null\n          status?: string\n          content?: string\n          context?: string | null\n          assigned_to?: string | null\n          resolved_at?: string | null\n          created_at?: string\n          updated_at?: string\n        }\n      }\n      consultant_actions_log: {\n        Row: {\n          id: string\n          consultant_id: string\n          user_id: string\n          action_type: string\n          details: Json | null\n          created_at: string\n        }\n        Insert: {\n          id?: string\n          consultant_id: string\n          user_id: string\n          action_type: string\n          details?: Json | null\n          created_at?: string\n        }\n        Update: {\n          id?: string\n          consultant_id?: string\n          user_id?: string\n          action_type?: string\n          details?: Json | null\n          created_at?: string\n        }\n      }\n    }\n    Functions: {\n      get_sections_for_page: {\n        Args: {\n          book_id_param: string\n          page_number_param: number\n        }\n        Returns: {\n          id: string\n          chapter_id: string\n          title: string\n          content: string\n          start_page: number\n          end_page: number\n          number: number\n          chapter_title: string\n          chapter_number: number\n        }[]\n      }\n      get_definition_with_context: {\n        Args: {\n          book_id_param: string\n          term_param: string\n          section_id_param?: string\n          chapter_id_param?: string\n        }\n        Returns: {\n          definition: string\n          priority: number\n        }[]\n      }\n      increment_counter: {\n        Args: {\n          table_name: string\n          column_name: string\n          row_id: string\n          increment_by: number\n        }\n        Returns: undefined\n      }\n      is_consultant: {\n        Args: Record<string, never>\n        Returns: boolean\n      }\n      log_consultant_action: {\n        Args: {\n          p_user_id: string\n          p_action_type: string\n          p_details?: Json\n        }\n        Returns: string\n      }\n      create_consultant_trigger: {\n        Args: {\n          p_user_id: string\n          p_book_id: string\n          p_trigger_type: string\n          p_message?: string\n        }\n        Returns: string\n      }\n      update_help_request_status: {\n        Args: {\n          p_request_id: string\n          p_status: string\n          p_assign_to_self?: boolean\n        }\n        Returns: boolean\n      }\n    }\n  }\n}\n\n// Common type exports\nexport type Profile = Database['public']['Tables']['profiles']['Row']\nexport type Book = Database['public']['Tables']['books']['Row']\nexport type Chapter = Database['public']['Tables']['chapters']['Row']\nexport type Section = Database['public']['Tables']['sections']['Row']\nexport type ReadingProgress = Database['public']['Tables']['reading_progress']['Row']\nexport type ReadingStats = Database['public']['Tables']['reading_stats']['Row']\nexport type AiInteraction = Database['public']['Tables']['ai_interactions']['Row']\nexport type AiPrompt = Database['public']['Tables']['ai_prompts']['Row']\nexport type ConsultantTrigger = Database['public']['Tables']['consultant_triggers']['Row']\nexport type ConsultantUser = Database['public']['Tables']['consultant_users']['Row']\nexport type UserFeedback = Database['public']['Tables']['user_feedback']['Row']\nexport type HelpRequest = Database['public']['Tables']['help_requests']['Row']\nexport type ConsultantAction = Database['public']['Tables']['consultant_actions_log']['Row']\n\n// Extended types with relationships\nexport type BookWithChapters = Book & {\n  chapters: (Chapter & {\n    sections: Section[]\n  })[]\n}\n\nexport type SectionWithChapter = Section & {\n  chapter_title: string\n  chapter_number: number\n}\n\nexport type BookProgress = {\n  section_id: SectionId\n  last_position: string | null\n  section_title?: string\n  chapter_title?: string\n  page_number?: number\n  percentage?: number\n}\n\nexport type BookStats = ReadingStats & {\n  percentage_complete?: number\n}\n\nexport type UserProfile = Profile\n\nexport type UserFeedbackWithRelations = UserFeedback & {\n  user?: UserProfile\n  section?: {\n    title: string\n    chapter_title: string\n  }\n}\n\nexport type HelpRequestWithRelations = HelpRequest & {\n  user?: UserProfile\n  consultant?: UserProfile\n  section?: {\n    title: string\n    chapter_title: string\n  }\n}\n\n// Enums\nexport enum FeedbackType {\n  AHA_MOMENT = 'AHA_MOMENT',\n  POSITIVE_EXPERIENCE = 'POSITIVE_EXPERIENCE',\n  SUGGESTION = 'SUGGESTION',\n  CONFUSION = 'CONFUSION',\n  GENERAL = 'GENERAL'\n}\n\nexport enum HelpRequestStatus {\n  PENDING = 'PENDING',\n  IN_PROGRESS = 'IN_PROGRESS',\n  RESOLVED = 'RESOLVED'\n}\n\nexport enum TriggerType {\n  ENGAGEMENT = 'ENGAGEMENT',\n  CHECK_IN = 'CHECK_IN',\n  QUIZ = 'QUIZ',\n  ENCOURAGE = 'ENCOURAGE'\n} "],"mappings":"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","names":["FeedbackType","HelpRequestStatus","TriggerType"]}